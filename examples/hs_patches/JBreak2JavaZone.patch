diff -r 9f1fd17203d5 src/cpu/x86/vm/templateInterpreterGenerator_x86_64.cpp
--- a/src/cpu/x86/vm/templateInterpreterGenerator_x86_64.cpp	Fri Mar 18 06:39:07 2016 +0100
+++ b/src/cpu/x86/vm/templateInterpreterGenerator_x86_64.cpp	Thu May 19 16:37:35 2016 +0200
@@ -351,7 +351,7 @@
   // stack: [ ret adr ] <-- rsp
 
   address entry_point = __ pc();
-  const char *msg = "\x0d0\x09f\x0d1\x080\x0d0\x0b8\x0d0\x0b2\x0d0\x0b5\x0d1\x082 JBreak!\n";
+  const char *msg = "Hello JavaZone!\n";
   __ mov64(c_rarg1, (long)stdout);
   __ mov64(c_rarg0, (long)msg);
   __ xorl(rax, rax);
diff -r 9f1fd17203d5 src/share/vm/classfile/vmSymbols.hpp
--- a/src/share/vm/classfile/vmSymbols.hpp	Fri Mar 18 06:39:07 2016 +0100
+++ b/src/share/vm/classfile/vmSymbols.hpp	Thu May 19 16:37:35 2016 +0200
@@ -1319,7 +1319,7 @@
    do_name(     putOrderedInt_name,                              "putOrderedInt")                                       \
    do_alias(    putOrderedInt_signature,                        /*(Ljava/lang/Object;JI)V*/ putInt_signature)           \
                                                                                                                                \
-  /* support for JBreak */                                                                                                     \
+  /* support for JavaZone */                                                                                                     \
   do_class(     helloWorld,               "org/simonis/HelloWorld")                                                            \
   do_intrinsic(_sayHello,                 helloWorld,                   sayHello_name, void_method_signature, F_S)             \
    do_name(     sayHello_name,            "sayHello")                                                                          \
diff -r 9f1fd17203d5 src/share/vm/interpreter/abstractInterpreter.cpp
--- a/src/share/vm/interpreter/abstractInterpreter.cpp	Fri Mar 18 06:39:07 2016 +0100
+++ b/src/share/vm/interpreter/abstractInterpreter.cpp	Thu May 19 16:37:35 2016 +0200
@@ -144,7 +144,7 @@
   case vmIntrinsics::_doubleToRawLongBits: return java_lang_Double_doubleToRawLongBits;
   }
 
-  if (JBreak) {
+  if (JavaZone) {
     if (m->intrinsic_id() == vmIntrinsics::_sayHello) {
       return HelloWorld_sayHello;
     }
diff -r 9f1fd17203d5 src/share/vm/interpreter/templateInterpreterGenerator.cpp
--- a/src/share/vm/interpreter/templateInterpreterGenerator.cpp	Fri Mar 18 06:39:07 2016 +0100
+++ b/src/share/vm/interpreter/templateInterpreterGenerator.cpp	Thu May 19 16:37:35 2016 +0200
@@ -255,7 +255,7 @@
       method_entry(java_lang_Double_longBitsToDouble);
       method_entry(java_lang_Double_doubleToRawLongBits);
 
-      if (JBreak) {
+      if (JavaZone) {
         method_entry(HelloWorld_sayHello);
       }
 #undef method_entry
diff -r 9f1fd17203d5 src/share/vm/oops/method.cpp
--- a/src/share/vm/oops/method.cpp	Fri Mar 18 06:39:07 2016 +0100
+++ b/src/share/vm/oops/method.cpp	Thu May 19 16:37:35 2016 +0200
@@ -1329,7 +1329,7 @@
   // exception: the AES intrinsics come from lib/ext/sunjce_provider.jar
   // which does not use the class default class loader so we check for its loader here
   const InstanceKlass* ik = InstanceKlass::cast(holder);
-  if (JBreak && ik->name()->equals("org/simonis/HelloWorld")) {
+  if (JavaZone && ik->name()->equals("org/simonis/HelloWorld")) {
     // check for org.simonis.HelloWorld
     return vmSymbols::find_sid(ik->name());
   }
diff -r 9f1fd17203d5 src/share/vm/runtime/globals.hpp
--- a/src/share/vm/runtime/globals.hpp	Fri Mar 18 06:39:07 2016 +0100
+++ b/src/share/vm/runtime/globals.hpp	Thu May 19 16:37:35 2016 +0200
@@ -4164,8 +4164,8 @@
   diagnostic(int,  CompilerDirectivesLimit, 50,                             \
              "Limit on number of compiler directives.")                     \
                                                                             \
-  product(bool, JBreak, false,                                              \
-          "Enable some JBreak specific enhancements")
+  product(bool, JavaZone, false,                                              \
+          "Enable some JavaZone specific enhancements")
 
 
 /*
