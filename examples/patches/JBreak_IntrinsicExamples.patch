# HG changeset patch
# Parent bd0a95bec96bfd0891569588a8ad7992ad8d0959
JBreak: Intrinsic examples

diff -r bd0a95bec96b src/hotspot/cpu/x86/assembler_x86.cpp
--- a/src/hotspot/cpu/x86/assembler_x86.cpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/cpu/x86/assembler_x86.cpp	Tue May 08 23:50:22 2018 +0200
@@ -3936,6 +3936,14 @@
 }
 #endif
 
+void Assembler::rdrandl(Register dst) {
+  assert(VM_Version::supports_rdrand(), "must support");
+  int encode = prefix_and_encode(dst->encoding());
+  emit_int8(0x0F);
+  emit_int8((unsigned char)0xC7);
+  emit_int8((unsigned char)(0xF0 | encode));
+}
+
 void Assembler::prefetch_prefix(Address src) {
   prefix(src);
   emit_int8(0x0F);
diff -r bd0a95bec96b src/hotspot/cpu/x86/assembler_x86.hpp
--- a/src/hotspot/cpu/x86/assembler_x86.hpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/cpu/x86/assembler_x86.hpp	Tue May 08 23:50:22 2018 +0200
@@ -1640,6 +1640,8 @@
   void popcntq(Register dst, Register src);
 #endif
 
+  void rdrandl(Register dst);
+
   // Prefetches (SSE, SSE2, 3DNOW only)
 
   void prefetchnta(Address src);
diff -r bd0a95bec96b src/hotspot/cpu/x86/templateInterpreterGenerator_x86_64.cpp
--- a/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_64.cpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/cpu/x86/templateInterpreterGenerator_x86_64.cpp	Tue May 08 23:50:22 2018 +0200
@@ -335,6 +335,29 @@
 // Various method entries
 //
 
+address TemplateInterpreterGenerator::generate_sayHello() {
+
+  // rbx,: Method*
+  // rcx: scratrch
+  // r13: sender sp
+  //
+  // stack: [ ret adr ] <-- rsp
+
+  address entry_point = __ pc();
+  const char *msg = "\x0d0\x09f\x0d1\x080\x0d0\x0b8\x0d0\x0b2\x0d0\x0b5\x0d1\x082 JBreak!\n";
+  __ mov64(c_rarg1, (long)stdout);
+  __ mov64(c_rarg0, (long)msg);
+  __ xorl(rax, rax);
+  __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, fputs)));
+
+  __ pop(rax);
+  __ mov(rsp, r13);
+  __ jmp(rax);
+
+  return entry_point;
+}
+
+
 address TemplateInterpreterGenerator::generate_math_entry(AbstractInterpreter::MethodKind kind) {
 
   // rbx,: Method*
diff -r bd0a95bec96b src/hotspot/cpu/x86/vm_version_x86.cpp
--- a/src/hotspot/cpu/x86/vm_version_x86.cpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/cpu/x86/vm_version_x86.cpp	Tue May 08 23:50:22 2018 +0200
@@ -688,7 +688,7 @@
   }
 
   char buf[256];
-  jio_snprintf(buf, sizeof(buf), "(%u cores per cpu, %u threads per core) family %d model %d stepping %d%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",
+  jio_snprintf(buf, sizeof(buf), "(%u cores per cpu, %u threads per core) family %d model %d stepping %d%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",
                cores_per_cpu(), threads_per_core(),
                cpu_family(), _model, _stepping,
                (supports_cmov() ? ", cmov" : ""),
@@ -702,6 +702,7 @@
                (supports_sse4_1() ? ", sse4.1" : ""),
                (supports_sse4_2() ? ", sse4.2" : ""),
                (supports_popcnt() ? ", popcnt" : ""),
+               (supports_rdrand() ? ", rdrand" : ""),
                (supports_avx()    ? ", avx" : ""),
                (supports_avx2()   ? ", avx2" : ""),
                (supports_aes()    ? ", aes" : ""),
diff -r bd0a95bec96b src/hotspot/cpu/x86/vm_version_x86.hpp
--- a/src/hotspot/cpu/x86/vm_version_x86.hpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/cpu/x86/vm_version_x86.hpp	Tue May 08 23:50:22 2018 +0200
@@ -88,7 +88,9 @@
                         : 1,
                osxsave  : 1,
                avx      : 1,
-                        : 3;
+                        : 1,
+               rdrand   : 1,
+                        : 1;
     } bits;
   };
 
@@ -335,6 +337,7 @@
 #define CPU_VZEROUPPER ((uint64_t)UCONST64(0x1000000000))       // Vzeroupper instruction
 #define CPU_AVX512_VPOPCNTDQ ((uint64_t)UCONST64(0x2000000000)) // Vector popcount
 #define CPU_VPCLMULQDQ ((uint64_t)UCONST64(0x4000000000)) //Vector carryless multiplication
+#define CPU_RDRAND   ((uint64_t)UCONST64(0x80000000000))  // RDRAND instruction
 
   enum Extended_Family {
     // AMD
@@ -516,6 +519,8 @@
       result |= CPU_SSE4_2;
     if (_cpuid_info.std_cpuid1_ecx.bits.popcnt != 0)
       result |= CPU_POPCNT;
+    if (_cpuid_info.std_cpuid1_ecx.bits.rdrand != 0)
+      result |= CPU_RDRAND;
     if (_cpuid_info.std_cpuid1_ecx.bits.avx != 0 &&
         _cpuid_info.std_cpuid1_ecx.bits.osxsave != 0 &&
         _cpuid_info.xem_xcr0_eax.bits.sse != 0 &&
@@ -796,6 +801,7 @@
   static bool supports_sse4_1()   { return (_features & CPU_SSE4_1) != 0; }
   static bool supports_sse4_2()   { return (_features & CPU_SSE4_2) != 0; }
   static bool supports_popcnt()   { return (_features & CPU_POPCNT) != 0; }
+  static bool supports_rdrand()   { return (_features & CPU_RDRAND) != 0; }
   static bool supports_avx()      { return (_features & CPU_AVX) != 0; }
   static bool supports_avx2()     { return (_features & CPU_AVX2) != 0; }
   static bool supports_tsc()      { return (_features & CPU_TSC)    != 0; }
diff -r bd0a95bec96b src/hotspot/cpu/x86/x86.ad
--- a/src/hotspot/cpu/x86/x86.ad	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/cpu/x86/x86.ad	Tue May 08 23:50:22 2018 +0200
@@ -1236,6 +1236,10 @@
       if (VM_Version::supports_avx512dq() == false)
         ret_value = false;
       break;
+    case Op_RandI:
+      if (VM_Version::supports_rdrand() == false)
+        ret_value = false;
+      break;
     case Op_AddReductionVL:
       if (UseAVX < 3) // only EVEX : vector connectivity becomes an issue here
         ret_value = false;
@@ -10492,6 +10496,15 @@
   ins_pipe( pipe_slow );
 %}
 
+instruct randI(rRegI dst) %{
+  match(Set dst (RandI));
+
+  format %{ "RANDI    $dst\t# int" %}
+  ins_encode %{
+    __ rdrandl($dst$$Register);
+  %}
+  ins_pipe( pipe_slow );
+%}
 // --------------------------------- XOR --------------------------------------
 
 instruct vxor4B(vecS dst, vecS src) %{
diff -r bd0a95bec96b src/hotspot/share/classfile/vmSymbols.hpp
--- a/src/hotspot/share/classfile/vmSymbols.hpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/share/classfile/vmSymbols.hpp	Tue May 08 23:50:22 2018 +0200
@@ -1352,6 +1352,15 @@
    do_name(     getAndSetObject_name,                                   "getAndSetObject")                                    \
    do_signature(getAndSetObject_signature,                              "(Ljava/lang/Object;JLjava/lang/Object;)Ljava/lang/Object;" ) \
                                                                                                                                \
+  /* support for JBreak */                                                                                                     \
+  do_class(     java_util_Random,         "java/util/Random")                                                                  \
+  do_intrinsic(_nextInt,                  java_util_Random,             nextInt_name, void_int_signature, F_R)                 \
+   do_name(     nextInt_name,                                           "nextInt")                                             \
+                                                                                                                               \
+  do_class(     helloWorld,               "io/simonis/HelloWorld")                                                            \
+  do_intrinsic(_sayHello,                 helloWorld,                   sayHello_name, void_method_signature, F_S)             \
+   do_name(     sayHello_name,            "sayHello")                                                                          \
+                                                                                                                               \
    /* (2) Bytecode intrinsics                                                                        */                        \
                                                                                                                                \
   do_intrinsic(_park,                     jdk_internal_misc_Unsafe,     park_name, park_signature,                     F_R)    \
@@ -1537,7 +1546,7 @@
     #undef VM_INTRINSIC_ENUM
 
     ID_LIMIT,
-    LAST_COMPILER_INLINE = _getAndSetObject,
+    LAST_COMPILER_INLINE = _nextInt,
     FIRST_MH_SIG_POLY    = _invokeGeneric,
     FIRST_MH_STATIC      = _linkToVirtual,
     LAST_MH_SIG_POLY     = _linkToInterface,
diff -r bd0a95bec96b src/hotspot/share/interpreter/abstractInterpreter.cpp
--- a/src/hotspot/share/interpreter/abstractInterpreter.cpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/share/interpreter/abstractInterpreter.cpp	Tue May 08 23:50:22 2018 +0200
@@ -138,6 +138,12 @@
     case vmIntrinsics::_doubleToRawLongBits: return java_lang_Double_doubleToRawLongBits;
     default:                                 break;
   }
+
+  if (JBreak) {
+    if (m->intrinsic_id() == vmIntrinsics::_sayHello) {
+      return HelloWorld_sayHello;
+    }
+  }
 #endif // CC_INTERP
 
   // Native method?
@@ -275,6 +281,7 @@
     case java_lang_math_sqrt    : tty->print("java_lang_math_sqrt"    ); break;
     case java_lang_math_log     : tty->print("java_lang_math_log"     ); break;
     case java_lang_math_log10   : tty->print("java_lang_math_log10"   ); break;
+    case HelloWorld_sayHello    : tty->print("HelloWorld_sayHello"    ); break;
     case java_lang_math_fmaD    : tty->print("java_lang_math_fmaD"    ); break;
     case java_lang_math_fmaF    : tty->print("java_lang_math_fmaF"    ); break;
     case java_util_zip_CRC32_update           : tty->print("java_util_zip_CRC32_update"); break;
diff -r bd0a95bec96b src/hotspot/share/interpreter/abstractInterpreter.hpp
--- a/src/hotspot/share/interpreter/abstractInterpreter.hpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/share/interpreter/abstractInterpreter.hpp	Tue May 08 23:50:22 2018 +0200
@@ -89,6 +89,7 @@
     java_lang_Float_floatToRawIntBits,                          // implementation of java.lang.Float.floatToRawIntBits()
     java_lang_Double_longBitsToDouble,                          // implementation of java.lang.Double.longBitsToDouble()
     java_lang_Double_doubleToRawLongBits,                       // implementation of java.lang.Double.doubleToRawLongBits()
+    HelloWorld_sayHello,                                        // implementation of io.simonis.HelloWorld.sayHello()
     number_of_method_entries,
     invalid = -1
   };
diff -r bd0a95bec96b src/hotspot/share/interpreter/templateInterpreterGenerator.cpp
--- a/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/share/interpreter/templateInterpreterGenerator.cpp	Tue May 08 23:50:22 2018 +0200
@@ -227,6 +227,9 @@
   method_entry(java_lang_Double_longBitsToDouble);
   method_entry(java_lang_Double_doubleToRawLongBits);
 
+      if (JBreak) {
+        method_entry(HelloWorld_sayHello);
+      }
 #undef method_entry
 
   // Bytecodes
@@ -441,6 +444,8 @@
                                            : // fall thru
   case Interpreter::java_util_zip_CRC32C_updateDirectByteBuffer
                                            : entry_point = generate_CRC32C_updateBytes_entry(kind); break;
+  case Interpreter::HelloWorld_sayHello
+                                           : entry_point = generate_sayHello(); break;
 #ifdef IA32
   // On x86_32 platforms, a special entry is generated for the following four methods.
   // On other platforms the normal entry is used to enter these methods.
diff -r bd0a95bec96b src/hotspot/share/interpreter/templateInterpreterGenerator.hpp
--- a/src/hotspot/share/interpreter/templateInterpreterGenerator.hpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/share/interpreter/templateInterpreterGenerator.hpp	Tue May 08 23:50:22 2018 +0200
@@ -94,6 +94,7 @@
   address generate_CRC32_update_entry();
   address generate_CRC32_updateBytes_entry(AbstractInterpreter::MethodKind kind);
   address generate_CRC32C_updateBytes_entry(AbstractInterpreter::MethodKind kind);
+  address generate_sayHello(void);
 #ifdef IA32
   address generate_Float_intBitsToFloat_entry();
   address generate_Float_floatToRawIntBits_entry();
diff -r bd0a95bec96b src/hotspot/share/oops/method.cpp
--- a/src/hotspot/share/oops/method.cpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/share/oops/method.cpp	Tue May 08 23:50:22 2018 +0200
@@ -1458,6 +1458,10 @@
   // exception: the AES intrinsics come from lib/ext/sunjce_provider.jar
   // which does not use the class default class loader so we check for its loader here
   const InstanceKlass* ik = InstanceKlass::cast(holder);
+  if (JBreak && ik->name()->equals("io/simonis/HelloWorld")) {
+    // check for io.simonis.HelloWorld
+    return vmSymbols::find_sid(ik->name());
+  }
   if ((ik->class_loader() != NULL) && !SystemDictionary::is_platform_class_loader(ik->class_loader())) {
     return vmSymbols::NO_SID;   // regardless of name, no intrinsics here
   }
diff -r bd0a95bec96b src/hotspot/share/opto/c2compiler.cpp
--- a/src/hotspot/share/opto/c2compiler.cpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/share/opto/c2compiler.cpp	Tue May 08 23:50:22 2018 +0200
@@ -425,6 +425,9 @@
   case vmIntrinsics::_fmaF:
     if (!UseFMA || !Matcher::match_rule_supported(Op_FmaF)) return false;
     break;
+  case vmIntrinsics::_nextInt:
+    if (!Matcher::match_rule_supported(Op_RandI)) return false;
+    break;
   case vmIntrinsics::_hashCode:
   case vmIntrinsics::_identityHashCode:
   case vmIntrinsics::_getClass:
diff -r bd0a95bec96b src/hotspot/share/opto/classes.hpp
--- a/src/hotspot/share/opto/classes.hpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/share/opto/classes.hpp	Tue May 08 23:50:22 2018 +0200
@@ -369,3 +369,4 @@
 macro(ExtractL)
 macro(ExtractF)
 macro(ExtractD)
+macro(RandI)
diff -r bd0a95bec96b src/hotspot/share/opto/intrinsicnode.hpp
--- a/src/hotspot/share/opto/intrinsicnode.hpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/share/opto/intrinsicnode.hpp	Tue May 08 23:50:22 2018 +0200
@@ -180,4 +180,12 @@
   virtual const Type* Value(PhaseGVN* phase) const;
 };
 
+class RandINode : public Node {
+public:
+  RandINode(Node *c) : Node(c) {}
+  virtual int Opcode() const;
+  const Type *bottom_type() const { return TypeInt::INT; }
+  virtual uint ideal_reg() const { return Op_RegI; }
+};
+
 #endif // SHARE_VM_OPTO_INTRINSICNODE_HPP
diff -r bd0a95bec96b src/hotspot/share/opto/library_call.cpp
--- a/src/hotspot/share/opto/library_call.cpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/share/opto/library_call.cpp	Tue May 08 23:50:22 2018 +0200
@@ -225,6 +225,7 @@
   bool runtime_math(const TypeFunc* call_type, address funcAddr, const char* funcName);
   bool inline_math_native(vmIntrinsics::ID id);
   bool inline_math(vmIntrinsics::ID id);
+  bool inline_random(vmIntrinsics::ID id);
   template <typename OverflowOp>
   bool inline_math_overflow(Node* arg1, Node* arg2);
   void inline_math_mathExact(Node* math, Node* test);
@@ -540,6 +541,8 @@
   case vmIntrinsics::_dlog10:
   case vmIntrinsics::_dpow:                     return inline_math_native(intrinsic_id());
 
+  case vmIntrinsics::_nextInt:                  return inline_random(intrinsic_id());
+
   case vmIntrinsics::_min:
   case vmIntrinsics::_max:                      return inline_min_max(intrinsic_id());
 
@@ -1732,6 +1735,21 @@
   return n;
 }
 
+//------------------------------inline_rand-----------------------------------
+// public int Random.nextInt()
+bool LibraryCallKit::inline_random(vmIntrinsics::ID id) {
+  Node* n = NULL;
+  switch (id) {
+  case vmIntrinsics::_nextInt:
+    if (!Matcher::match_rule_supported(Op_RandI)) return false;
+    n = new RandINode(control());
+    break;
+  default:  fatal_unexpected_iid(id);  break;
+  }
+  set_result(_gvn.transform(n));
+  return true;
+}
+
 //------------------------------inline_math-----------------------------------
 // public static double Math.abs(double)
 // public static double Math.sqrt(double)
diff -r bd0a95bec96b src/hotspot/share/runtime/arguments.cpp
--- a/src/hotspot/share/runtime/arguments.cpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/share/runtime/arguments.cpp	Tue May 08 23:50:22 2018 +0200
@@ -3513,8 +3513,8 @@
     return JNI_ENOMEM;
   }
 
-  jio_fprintf(defaultStream::error_stream(),
-              "Picked up %s: %s\n", name, buffer);
+  //jio_fprintf(defaultStream::error_stream(),
+  //            "Picked up %s: %s\n", name, buffer);
 
   int retcode = parse_options_buffer(name, buffer, strlen(buffer), vm_args);
 
diff -r bd0a95bec96b src/hotspot/share/runtime/globals.hpp
--- a/src/hotspot/share/runtime/globals.hpp	Fri May 04 09:29:14 2018 +0200
+++ b/src/hotspot/share/runtime/globals.hpp	Tue May 08 23:50:22 2018 +0200
@@ -2640,6 +2640,9 @@
   diagnostic(int,  CompilerDirectivesLimit, 50,                             \
              "Limit on number of compiler directives.")                     \
                                                                             \
+  product(bool, JBreak, false,                                              \
+          "Enable some JBreak specific features")                           \
+                                                                            \
   product(ccstr, AllocateHeapAt, NULL,                                      \
           "Path to the directoy where a temporary file will be created "    \
           "to use as the backing store for Java Heap.")                     \
diff -r bd0a95bec96b src/java.base/share/classes/java/util/Random.java
--- a/src/java.base/share/classes/java/util/Random.java	Fri May 04 09:29:14 2018 +0200
+++ b/src/java.base/share/classes/java/util/Random.java	Tue May 08 23:50:22 2018 +0200
@@ -34,6 +34,7 @@
 import java.util.stream.LongStream;
 import java.util.stream.StreamSupport;
 
+import jdk.internal.HotSpotIntrinsicCandidate;
 import jdk.internal.misc.Unsafe;
 
 /**
@@ -325,6 +326,7 @@
      * @return the next pseudorandom, uniformly distributed {@code int}
      *         value from this random number generator's sequence
      */
+    @HotSpotIntrinsicCandidate
     public int nextInt() {
         return next(32);
     }
