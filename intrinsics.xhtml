<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

  <head>
    <meta charset="utf-8" />

    <title>HotSpot Intrinsics</title>

    <meta name="description" content="A short introduction to HotSpot Intrinsics" />
    <meta name="author" content="Volker H. Simonis" />

    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui" />

    <link rel="stylesheet" href="reveal.js/css/reveal.css" />
    <link rel="stylesheet" href="reveal.js/css/theme/joker2017.css" id="theme" />
    <!-- Code syntax highlighting -->
    <link rel="stylesheet" href="reveal.js/lib/css/monokai_sublime.css" />
    <!-- Local overrides -->
    <link rel="stylesheet" href="css/local.css" />

  <style type="text/css">
.scrollable {
    bottom: 0px;
    overflow-y: auto  !important;
    overflow-x: hidden !important;
}

.reveal .big {
    font-size: .8em;
    line-height: 1.3em;
}

.reveal pre.console {
    background-color: black;
    color: #00ff00;
}

code.terminal .hljs-title {
    color: #00ff00;
}

.reveal pre.noshadow {
    border-radius: 0;
    box-shadow: unset;
}

.reveal pre code {
    max-height: 98%;
}
.bold {
    font-weight: bold;
}

  table.calling_hirarchy {
//    font-family: monospace, arial, helvetica, sans-serif;
//    background-color: #ffffff;
    font-size: smaller;
    border-collapse: collapse;
    margin: 0px auto;
    padding: 2px;
    width: auto;
    overflow: auto;
    border: none;
  }

  table.calling_hirarchy tr {
    border: none;
  }

  table.calling_hirarchy td {
    padding: 5px;
//    font-family: monospace;
  }

  td.indent_level_0 {
    border-style: solid;
    border-width: 2px;
    background-color: #a0a0a0;
  }
  td.indent_level_1 {
    border-style: solid;
    border-width: 2px;
    background-color: #a8a8a8;
  }
  td.indent_level_2 {
    border-style: solid;
    border-width: 2px;
    background-color: #b0b0b0;
  }
  td.indent_level_3 {
    border-style: solid;
    border-width: 2px;
    background-color: #b8b8b8;
  }
  td.indent_level_4 {
    border-style: solid;
    border-width: 2px;
    background-color: #c0c0c0;
  }
  td.indent_level_5 {
    border-style: solid;
    border-width: 2px;
    background-color: #c8c8c8;
  }
  td.indent_level_6 {
    border-style: solid;
    border-width: 2px;
    background-color: #d0d0d0;
  }
  td.indent_level_7 {
    border-style: solid;
    border-width: 2px;
    background-color: #d8d8d8;
  }
  td.indent_level_8 {
    border-style: solid;
    border-width: 2px;
    background-color: #e0e0e0;
  }
  td.indent_level_9 {
    border-style: solid;
    border-width: 2px;
    background-color: #e8e8e8;
  }
  td.indent_level_10 {
    border-style: solid;
    border-width: 2px;
    background-color: #f0f0f0;
  }
  td.indent_level_11 {
    border-style: solid;
    border-width: 2px;
    background-color: #f8f8f8;
  }
  td.indent_level_12 {
    border-style: solid;
    border-width: 2px;
    background-color: #ffffff;
  }
  td.functionCall {
//    font-weight: bold;
    color: darkblue;
  }
  td.javaCall {
    font-weight: bold;
    color: darkgreen;
  }
  td.comment {
    font-style: italic;
    color: maroon;
  }
  td.highlight {
    border-style: solid;
    border-width: 2px;
    background-color: #a0ffa0;
  }
  table.calling_hirarchy td[rowspan] {
    border-style: none;
    border-width: 0;
    border-left: dotted;
    border-left-width: 2px;
  }

  </style>

    <!-- Printing and PDF exports -->
    <script>
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'reveal.js/css/print/pdf.css' : 'reveal.js/css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    </script>

    <!--[if lt IE 9]>
    <script src="reveal.js/lib/js/html5shiv.js"></script>
    <![endif]-->

    <!--
      Issue #1105: Keyboard shortcut to skip forward/back over fragments #1173
      https://github.com/hakimel/reveal.js/pull/1173
    -->
  </head>

<!--
;; indent block of text
;; C-u <number> C-x <TAB>



;; select this code and do 'M-x eval-region'
(defun make-fragment (p1 p2)
  "Wraps the selection into 'fragment' <span>s and quotes '&', '<' and '>'."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq inputStr (replace-regexp-in-string "&" "&amp;" inputStr))
  (setq inputStr (replace-regexp-in-string "<" "&lt;" inputStr))
  (setq inputStr (replace-regexp-in-string ">" "&gt;" inputStr))
  (setq resultStr (concat "<span class=\"fragment\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun make-fragment-simple (p1 p2)
  "Wraps the selection into 'fragment' <span>s without any quoting."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq resultStr (concat "<span class=\"fragment\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun quote-fragment (p1 p2)
  "Quotes '&', '<' and '>'."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq inputStr (replace-regexp-in-string "&" "&amp;" inputStr))
  (setq inputStr (replace-regexp-in-string "<" "&lt;" inputStr))
  (setq inputStr (replace-regexp-in-string ">" "&gt;" inputStr))
  (delete-region p1 p2)
  (insert inputStr)
)

(global-set-key (kbd "C-f") 'make-fragment)
(global-set-key (kbd "C-S-f") 'make-fragment-simple)
(global-set-key (kbd "C-S-q") 'quote-fragment)
;; revert key-binding
;; (global-set-key (kbd "C-f") 'forward-char)
;;
;; use 'C-h k <keystroke>' to find out what <keystroke> is currently bound to

;; (vhs) The following is required to make 'C-c C-t' insert <code> tags without
;; newlines. 'sgml-tag-alist' is the "file-local" version of 'html-tag-alist'
(add-to-list 'html-tag-alist '("code"))
(add-to-list 'sgml-tag-alist '("code"))

-->

  <body>

    <div class="reveal">

      <!-- Any section element inside of this container is displayed as a slide -->
      <div class="slides">

        <section>
          <h1>HotSpot Intrinsics<br/></h1>
          <p>
            <small>Volker Simonis, SAP / <a href="mailto:volker.simonis@gmail.com">volker.simonis@gmail.com</a> / <a href="https://twitter.com/volker_simonis">@volker_simonis</a></small>
          </p>
        </section>


        <section>

          <h3 style="text-transform: none;"><a href="https://github.com/simonis/GeekOut2018">https://github.com/simonis/GeekOut2018</a></h3>

          <h3 style="text-transform: none;"><a href="https://simonis.github.io/GeekOut2018">https://simonis.github.io/GeekOut2018</a></h3>

        </section>


        <section>

          <h2>Intrinsics</h2>

          <blockquote>
            <p style="text-align:justify">
              &ldquo; ..an <span class="bold">intrinsic</span> function (a.k.a.
              <span class="bold">builtin</span> function) is a function
              available for use in a given programming language whose
              implementation is handled specially by the compiler. Typically, it
              substitutes a sequence of automatically generated instructions for
              the original function call.. &rdquo;
            </p>
          </blockquote>

          <blockquote>
            <p style="text-align:justify">
              &ldquo; ..the compiler has an intimate knowledge of the intrinsic
              function and can therefore better integrate it and optimize it for
              the situation.. &rdquo;
            </p>
            <footer>
              <cite><a href="https://en.wikipedia.org/wiki/Intrinsic_function">Intrinsic function - Wikipedia</a></cite>
            </footer>
          </blockquote>

        </section>


        <section>

          <h2>Intrinsics</h2>

          <ul>
            <li>Improve performance:<br/>
              <pre class="big noshadow" data-trim="true">
                <code class="java" text-trim="true">
<![CDATA[
GCC:  bzero(), snprintf(), strndup(), log2(), ..       
Java: Math.sqrt(), System.arraycopy(), ..
]]>
                </code>
              </pre>
            </li>
            <li>Expose functionality not expressable in the language itself:<br/>
              <pre class="big noshadow" data-trim="true">
                <code class="java" text-trim="true">
<![CDATA[
GCC:  _xbegin(), _xend(), ..     // Transactional Memory
Java: Unsafe.allocateInstance(),
      Thread.onSpinWait()        // JEP 285
]]>
                </code>
              </pre>
            </li>
            <li>Direct access to CPU instructions (assembler):<br/>
              <pre class="big noshadow" data-trim="true">
                <code class="java" text-trim="true">
<![CDATA[
MSVC: __movsq(), __mul128()                            
Java: Unsafe.loadFence()
]]>
                </code>
              </pre>
              <br/>
              <a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide">https://software.intel.com/sites/landingpage/IntrinsicsGuide</a>
            </li>
          </ul>

        </section>


        <section>
          <section>
            <h2>The &ldquo;<code>HelloWorld</code>&rdquo; Intrinsic</h2>

            <pre class="big noshadow" data-trim="true">
              <code class="java" text-trim="true">
<![CDATA[
public class HelloWorld {

  public static void sayHello() {
      System.out.println("Hello GeekOut!");
  }

  public static void main(String ... args) {

    long start = System.nanoTime();
    sayHello();
    long stop = System.nanoTime();

    System.out.format("%,9d%s%n", stop - start, "ns");
  }
}
]]>
              </code>
            </pre>
          </section>

          <section>

            <pre class="big noshadow" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$<span class="fragment"> javac io/simonis/HelloWorld.java
$</span> <span class="fragment">java  io.simonis.HelloWorld
Hello GeekOut!
1,368,398ns

$</span> <span class="fragment">java <span class="fragment highlight-current-border">-XX:+GeekOut</span> io.simonis.HelloWorld
Hello GeekOut!
   <span class="fragment highlight-current-border">83,191ns</span>

$</span> <span class="fragment">sed -i 's/<span class="fragment highlight-current-border">Hello GeekOut</span>/<span class="fragment highlight-current-border">Hello World</span>/g' <span class="fragment highlight-current-border">io/simonis/HelloWorld.java</span>
$</span> <span class="fragment">javac io/simonis/HelloWorld.java
$</span> <span class="fragment">java  io.simonis.HelloWorld
<span class="fragment highlight-current-border">Hello World!</span>
1,483,216ns

$</span> <span class="fragment">java <span class="fragment highlight-current-border">-XX:+GeekOut</span> io.simonis.HelloWorld
<span class="fragment highlight-current-border">Hello GeekOut!</span>
   82,514ns</span>
              </code>
            </pre>
          </section>
        </section>


        <section style="height: 100%;">

          <section>
            <h2>Observability - Bytecode Instrumentation</h2>

            <ul>
              <li>Allows dynamic changes of Java Bytecodes at runtime</li>
              <li>Only addition of bytecodes to Java methods</li>
              <li>Used by monitoring agents, profilers, coverage tools and event loggers</li>
              <li>Implemented in <code>java.lang.instrument</code></li>
              <li>Loaded into the VM with <code>-javaagent:jarpath[=options]</code></li>
              <li>The agent implements "<code>premain(String args, Instrumentation inst)</code>"</li>
            </ul>

          </section>

          <section style="height: 100%;">

            <h2>The Java Instrumentation Agent</h2>

            <pre class="big noshadow scrollable" style="height: 80%;" data-trim="true">
              <code class="java" text-trim="true" data-noescape="true">
<![CDATA[
package io.simonis;

import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.lang.instrument.Instrumentation;
import java.security.ProtectionDomain;

import jdk.internal.org.objectweb.asm.ClassReader;
import jdk.internal.org.objectweb.asm.ClassVisitor;
import jdk.internal.org.objectweb.asm.ClassWriter;
import jdk.internal.org.objectweb.asm.MethodVisitor;
import jdk.internal.org.objectweb.asm.Opcodes;

public class MethodInstrumentationAgent {

  static String pattern;

  public static void premain(String args, Instrumentation inst) {
    inst.addTransformer(new MethodInstrumentorTransformer());
    pattern = args;
  }

  static class MethodInstrumentorTransformer implements ClassFileTransformer {

    @Override
    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,
        ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
      ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
      MethodInstrumentorClassVisitor cv = new MethodInstrumentorClassVisitor(cw);
      ClassReader cr = new ClassReader(classfileBuffer);
      cr.accept(cv, 0);
      return cw.toByteArray();
    }

  }

  static class MethodInstrumentorClassVisitor extends ClassVisitor {
    private String className;

    public MethodInstrumentorClassVisitor(ClassVisitor cv) {
      super(Opcodes.ASM5, cv);
    }

    @Override
    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
      cv.visit(version, access, name, signature, superName, interfaces);
      className = name;
    }

    @Override
    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
      MethodVisitor mv = cv.visitMethod(access, name, desc, signature, exceptions);
      if (className.startsWith(pattern)) {
        mv = new MethodInstrumentorMethodVisitor(mv, name + desc);
      }
      return mv;
    }
  }

  static class MethodInstrumentorMethodVisitor extends MethodVisitor implements Opcodes {
    private String methodName;

    public MethodInstrumentorMethodVisitor(MethodVisitor mv, String name) {
      super(Opcodes.ASM5, mv);
      methodName = name;
    }

    @Override
    public void visitCode() {
      mv.visitCode();
      mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
      mv.visitLdcInsn("-> " + methodName);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
    }

    @Override
    public void visitInsn(int opcode) {
      if ((opcode >= IRETURN && opcode <= RETURN) || opcode == ATHROW) {
        mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
        mv.visitLdcInsn("<- " + methodName);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
      }
      mv.visitInsn(opcode);
    }
  }
}
]]>
              </code>
            </pre>
          </section>
<!---
          <section>

            <p>The Manifest file:</p>

            <pre class="big noshadow" data-trim="true">
              <code class="java" text-trim="true">
<![CDATA[
Manifest-VErsion: 1.0
Premain-Class: io.simonis.MethodInstrumentationAgent
]]>
              </code>
            </pre>

            <p>Compile and create with:</p>

            <pre class="big noshadow" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$ javac -XDignore.symbol.file=true io/simonis/MethodInstrumentationAgent.java

$ jar cvfm MetInstAgent.jar manifest.mf \
                            io/simonis/MethodInstrumentationAgent*.class
              </code>
            </pre>

          </section>
-->
          <section>
            <h2>Observability - Bytecode Instrumentation</h2>


            <pre class="big noshadow" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$ java <span class="fragment highlight-current-border">-javaagent:MetInstAgent.jar</span>=<span class="fragment highlight-current-border">io/simonis</span> io.simonis.HelloWorld
<span class="fragment">-&gt; main([Ljava/lang/String;)V</span>
<span class="fragment">-&gt; sayHello()V
Hello GeekOut!</span>
<span class="fragment">&lt;- sayHello()V
  651,538ns</span>
<span class="fragment">&lt;- main([Ljava/lang/String;)V</span>

<span class="fragment">$ java <span class="fragment highlight-current-border">-XX:+GeekOut</span> -javaagent:MetInstAgent.jar=io/simonis io.simonis.HelloWorld</span>
<span class="fragment">-&gt; main([Ljava/lang/String;)V
Hello GeekOut!
   51,750ns</span>
<span class="fragment">&lt;- main([Ljava/lang/String;)V</span>
              </code>
            </pre>
          </section>

        </section>


        <section style="height: 100%;">

          <section>
            <h2>Observability - JVMTI Agents</h2>

            <ul>
              <li>JVMTI is the Java Virtual Machine Tool Interface</li>
              <li>Allows programs to inspect the state and control the execution of the VM</li>
              <li>Used by debuggers and profilers</li>
              <li>A native interface to the Java VM</li>
              <li>JVMTI agents are loaded during VM initialization</li>
              <li>They access the VM by calling JVMTI and JNI functions</li>
            </ul>
          </section>

          <section style="height: 100%;">

            <h2>A simple tracing JVMTI Agent</h2>

            <pre class="big noshadow scrollable" style="height: 80%;" data-trim="true">
              <code class="cpp" text-trim="true" data-noescape="true">
<![CDATA[
// Build as follows:
// g++ -fPIC -shared -I <JDK>/include/ -I <JDK>/include/linux/ -o trMethAgent.so traceMethodAgent.cpp
#include <jvmti.h>
#include <stdio.h>
#include <string.h>

const char* pattern = "";

static void printMethod(jvmtiEnv* jvmti, jmethodID method, const char* prefix) {
  char *name, *sig, *cl;
  jclass javaClass;
  jvmti->GetMethodDeclaringClass(method, &javaClass);
  jvmti->GetClassSignature(javaClass, &cl, NULL);
  ++cl; // Ignore leading 'L'
  if (strstr(cl, pattern) == cl) {
    jvmti->GetMethodName(method, &name, &sig, NULL);
    cl[strlen(cl) - 1] = '\0'; // Strip trailing ';'
    fprintf(stdout, "%s %s::%s%s\n", prefix, cl, name, sig);
    fflush (NULL);
    jvmti->Deallocate((unsigned char*) name);
    jvmti->Deallocate((unsigned char*) sig);
  }
  jvmti->Deallocate((unsigned char*) --cl);
}

void JNICALL methodEntryCallback(jvmtiEnv* jvmti, JNIEnv* jni, jthread thread, jmethodID method) {
  printMethod(jvmti, method, "->");
}

void JNICALL methodExitCallback(jvmtiEnv* jvmti, JNIEnv* jni, jthread thread, jmethodID method, jboolean except, jvalue ret_val) {
  printMethod(jvmti, method, "<-");
}

extern "C"
JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM* jvm, char* options, void* reserved) {
  jvmtiEnv* jvmti = NULL;
  jvmtiCapabilities capa;
  jvmtiError error;

  if (options) pattern = strdup(options); // Options may contain the pattern

  jint result = jvm->GetEnv((void**) &jvmti, JVMTI_VERSION_1_1);
  if (result != JNI_OK) {
    fprintf(stderr, "Can't access JVMTI!\n");
    return JNI_ERR;
  }

  memset(&capa, 0, sizeof(jvmtiCapabilities));
  capa.can_generate_method_entry_events = 1;
  capa.can_generate_method_exit_events = 1;
  if (jvmti->AddCapabilities(&capa) != JVMTI_ERROR_NONE) {
    fprintf(stderr, "Can't set capabilities!\n");
    return JNI_ERR;
  }
  jvmtiEventCallbacks callbacks;
  memset(&callbacks, 0, sizeof(jvmtiEventCallbacks));
  callbacks.MethodEntry = methodEntryCallback;
  callbacks.MethodExit = methodExitCallback;
  if (jvmti->SetEventCallbacks(&callbacks, sizeof(jvmtiEventCallbacks)) != JVMTI_ERROR_NONE) {
    fprintf(stderr, "Can't set event callbacks!\n");
    return JNI_ERR;
  }
  if (jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_METHOD_ENTRY, NULL) != JVMTI_ERROR_NONE) {
    fprintf(stderr, "Can't enable JVMTI_EVENT_METHOD_ENTRY!\n");
    return JNI_ERR;
  }
  if (jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_METHOD_EXIT, NULL) != JVMTI_ERROR_NONE) {
    fprintf(stderr, "Can't enable JVMTI_EVENT_METHOD_EXIT!\n");
    return JNI_ERR;
  }
}
]]>
              </code>
            </pre>
          </section>

          <section>
            <h2>Observability - JVMTI Agents</h2>

            <pre class="big noshadow" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$ java <span class="fragment highlight-current-border">-agentpath:trMethAgent.so</span>=<span class="fragment highlight-current-border">io/simonis</span> io.simonis.HelloWorld
<span class="fragment">-&gt; io/simonis/HelloWorld::main([Ljava/lang/String;)V</span>
<span class="fragment">-&gt; io/simonis/HelloWorld::sayHello()V
Hello GeekOut!</span>
<span class="fragment">&lt;- io/simonis/HelloWorld::sayHello()V
24,256,161ns</span>
<span class="fragment">&lt;- io/simonis/HelloWorld::main([Ljava/lang/String;)V</span>

<span class="fragment">$ java <span class="fragment highlight-current-border">-XX:+GeekOut</span> -agentpath:trMethAgent.so=io/simonis io.simonis.HelloWorld</span>
<span class="fragment">-&gt; io/simonis/HelloWorld::main([Ljava/lang/String;)V
Hello GeekOut!
  171,417ns</span>
<span class="fragment">&lt;- io/simonis/HelloWorld::main([Ljava/lang/String;)V</span>
              </code>
            </pre>
          </section>

          <section>
            <h2><code>jdb</code> Demo</h2>
          </section>
        </section>


        <section class="demo">
          <div width="100%" style="position: relative; margin: 0 0 0 0px;">
            <div class="" style="position: static; width: 100%">
              <a href="https://bugs.openjdk.java.net/browse/JDK-8013579">
                <object data="images/8013579_intrinsics_class_redef_new.png" type="image/png"
                        style="width: 90%;">&nbsp;</object>
              </a>
            </div>
            <div class="fragment" data-fragment-index="1" style="position: absolute; left: 0; top: 0; width: 100%">
              <a href="https://bugs.openjdk.java.net/browse/JDK-8013579">
                <object data="images/8013579_intrinsics_class_redef_new_marked.png" type="image/png"
                        style="width: 90%;">&nbsp;</object>
              </a>
            </div>
          </div>
        </section>

        <section style="height: 100%;">

          <section>
            <h2>Math Intrinsics</h2>

            <pre class="big noshadow" data-trim="true">
              <code class="java" data-trim="true" data-noescape="true">
static double compute(int <span class="fragment highlight-current-border" data-fragment-index="1">count</span>, double <span class="fragment highlight-current-border" data-fragment-index="2">d</span>) {
  for (int i = 0; i &lt; <span class="fragment highlight-current-border" data-fragment-index="1">count</span>; i++) {
    <span class="fragment highlight-current-border" data-fragment-index="2">d</span> += Math.pow(Math.sin(<span class="fragment highlight-current-border" data-fragment-index="2">d</span>), Math.sqrt(<span class="fragment highlight-current-border" data-fragment-index="2">d</span>)); // d += sin(d) ^ sqrt(d)
  }
  return <span class="fragment highlight-current-border" data-fragment-index="2">d</span>;
}

public static void main(String[] args) throws Exception {
  double  <span class="fragment highlight-current-border" data-fragment-index="3">seed</span> = args.length;                 // Avoid constant folding
  int    <span class="fragment highlight-current-border" data-fragment-index="4">count</span> = Integer.parseInt(args[0]);   // Iteration count for compute()

  for (int i = 0; i &lt; 20_000; i++) {
    <span class="fragment highlight-current-border" data-fragment-index="5">compute</span>(<span class="fragment highlight-current-border" data-fragment-index="5">1</span>, <span class="fragment highlight-current-border" data-fragment-index="3">seed</span>);                         // JIT-compile compute()
  }

  <span class="fragment highlight-current-border" data-fragment-index="6">compute</span>(<span class="fragment highlight-current-border" data-fragment-index="6">count</span>, <span class="fragment highlight-current-border" data-fragment-index="3">seed</span>);                       // Call compute() with huge count
}
              </code>
            </pre>
          </section>

          <section>
            <h2>DEMO</h2>
          </section>

          <section>
            <h2>Math Intrinsics &amp; Time To Safepoint (TTS)</h2>

            <pre class="big noshadow" data-trim="true">
              <code class="java" data-trim="true" data-noescape="true">
public static void main(String[] args) throws Exception {
  ...                                         // Same as before ...

  <span class="fragment highlight-current-border">new Thread()</span> {                              // Create a new thread..
    { setDaemon(true); }                      // ..and make it a daemon thread.
    public void run() {
      <span class="fragment highlight-current-border">while (true)</span> {
        try {
          <span class="fragment highlight-current-border">Thread.sleep(1_000)</span>;                // Every second..
        } catch (InterruptedException e) {}
        <span class="fragment highlight-current-border">System.gc()</span>;                          // ..we trigger a GC.
      }
    }
  }.start();                                  // Let it run concurrently.

  <span class="fragment highlight-current-border">compute(count, seed)</span>;                       // Call compute() with huge count
              </code>
            </pre>
          </section>

          <section>
            <h2>DEMO</h2>
          </section>

          <section>
            <h3 style="text-transform: none;"><code>-XX:+UseCountedLoopSafepoints</code><a href="https://bugs.openjdk.java.net/browse/JDK-6869327"> (JDK-6869327)</a></h3>
            <img class="plain" data-src="images/6869327_counted_loop_safep.png" alt="JDK-6869327: Add new C2 flag to keep safepoints in counted loops"/>
          </section>

<!--
6869327: Add new C2 flag to keep safepoints in counted loops.
-XX:+UseCountedLoopSafepoints
6869327_counted_loop_safep.png
-->

        </section>


        <section style="height: 100%;">
          <h2>HotSpot Intrinsics</h2>

          <p style="text-align:left">Defined in: <code>src/share/vm/classfile/vmSymbols.hpp</code></p>

          <ul>
            <li>Library intrinsics (~260)
              <ul>
                <li>Library methods replaced by assembly, IR or both</li>
              </ul>
            </li>
            <li>Bytecode intrinsics (~40)
              <ul>
                <li>Late/always inlining candidates (e.g. <code>StringBuffer::*</code>, boxing/unboxing methods)</li>
                <li>See: <code>Compile::should_delay_string_inlining()</code> in <code>doCall.cpp</code></li>
                <li>See: <code>InlineTree::should_inline()</code> in <code>bytecodeInfo.cpp</code></li>
              </ul>
            </li>
            <li><em>Only for system classes</em></li>
            <li>Must be annotated with <code>jdk.internal.HotSpotIntrinsicCandidate</code> (since Java 9)
              <ul>
                <li>Checked by <code>-XX:+CheckIntrinsics</code></li>
              </ul>
            </li>
          </ul>

        </section>


        <section style="height: 100%;">
          <h2>Library Intrinsics</h2>

          <ul>
            <li>Interpreter:
              <ul>
                <li>Implements only few intrinsics (notably <code>Math</code> and <code>CRC32</code>)</li>
                <li>Generates special entry points (see: <code>AbstractInterpreter::MethodKind()</code>)</li>
              </ul>
            </li>
            <li>C1 (aka "client") JIT:
              <ul>
                <li>Mostly <code>Unsafe</code> and <code>Math</code> intrinsics (see <code>Compiler::is_intrinsic_supported()</code>)</li>
                <li>See: <code>GraphBuilder::build_graph_for_intrinsic()</code></li>
              </ul>
            </li>
            <li>C2 (aka "server") JIT:<ul>
                <li>See <code>C2Compiler::is_intrinsic_supported()</code> for a complete list</li>
                <li>See <code>LibraryCallKit::try_to_inline()</code> in <code>library_call.cpp</code></li>
                <li>Create new "Intermediate Representation" (i.e. IR) nodes..<br/>
                  ..and match these nodes with corresponding "Machine Nodes" in <code>.ad</code> file</li>
                <li>Use <code>IdealKit</code>/<code>GraphKit</code> to mimic the functionality directly in IR<br/>
                  (see <code>PhaseStringOpts</code> methods in <code>stringopts.hpp</code></li>
              </ul>
            </li>
          </ul>

        </section>


        <section style="height: 100%;">
          <h2>Controlling Intrinsics</h2>

          <ul>
            <li><code>-XX:+PrintCompilation -XX:+PrintInlining</code><br/>
              <pre class="big noshadow" data-trim="true">
                <code class="cpp" text-trim="true">
<![CDATA[
613    1    b        io.simonis.Loop::compute (29 bytes)
                        @ 9   java.lang.Math::sin (5 bytes)   (intrinsic)    
                        @ 13   java.lang.Math::sqrt (5 bytes)   (intrinsic)
]]>
                </code>
              </pre>
            </li>
            <li class="fragment"><code>-XX:+CheckIntrinsics</code> (together with <code>@HotSpotIntrinsicCandidate</code>)><br/>
              <pre class="big noshadow" data-trim="true">
                <code class="cpp" text-trim="true">
<![CDATA[
Compiler intrinsic is defined for method [io.simonis.HelloWorld.sayHello()V],
but the method is not annotated with @HotSpotIntrinsicCandidate. Exiting.
]]>
                </code>
              </pre>
            </li>
            <li class="fragment"><code>-XX:DisableIntrinsic={_dsqrt, ...}</code> (use id from <code>vmSymbols.hpp</code>)</li>
            <li class="fragment"><code>-XX:+PrintIntrinsics</code></li>
            <li class="fragment"><code>-XX:+Use{AES,CRC32,GHASH,MathExact,...}Intrinsics</code></li>
            <li class="fragment"><code>-XX:-InlineNatives</code>, <code>-XX:-Inline{Math, Class, Thread, ...}Natives</code><br/>
              <code>-XX:-Inline{UnsafeOps, ArrayCopy, ObjectHash}</code></li>
          </ul>

        </section>


        <section>

          <h2>Native (JNI) vs. Intrinsic methods</h2>

          <ul>
            <li>JVM state (safepoints)</li>
            <li>Java vs. native calling conventions</li>
            <li>Platform dependent (native implementation required!)
              <ul>
                <li>..for every platform!</li>
              </ul>
            </li>
            <li>OK for 'expensive' calls like I/O</li>
            <li style="margin-top: 3ex;">NOTICE: a native JNI call differs from a native VM "leaf call"!</li>
          </ul>

        </section>


        <section style="height: 100%;">

          <section>

            <h2>Implementing an Interpreter Intrinsics</h2>

            <p style="text-align:left">Define in: <code>src/share/vm/classfile/vmSymbols.hpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
do_class(     helloWorld,    "io/simonis/HelloWorld")                      \
do_intrinsic(_sayHello,      helloWorld, sayHello_name, sayHello_sign, F_S) \
 do_name(     sayHello_name, "sayHello")                                    \ 
 do_signature(sayHello_sign, "()V")                                         \
]]>
              </code>
            </pre>

            <p class="fragment" data-fragment-index="1" style="text-align:left">Define in: <code>src/share/vm/interpreter/abstractInterpreter.hpp</code></p>

            <pre class="big noshadow fragment" data-fragment-index="1" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
class AbstractInterpreter: AllStatic {
  enum MethodKind {
    zerolocals,          // normal method (needs locals initialization)
    java_lang_math_sin,  // implementation of java.lang.Math.sin(x)
    ...
    HelloWorld_sayHello, // implementation of io.simonis.HelloWorld.sayHello()
]]>
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing an Interpreter Intrinsics</h2>

            <p style="text-align:left">Map in: <code>src/share/vm/interpreter/abstractInterpreter.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
MethodKind AbstractInterpreter::method_kind(methodHandle m) {
  ...
  if (GeekOut) {
    if (m->intrinsic_id() == vmIntrinsics::_sayHello) {                       
      return HelloWorld_sayHello;
]]>
              </code>
            </pre>

            <p class="fragment" data-fragment-index="1" style="text-align:left">Generate in: <code>src/share/vm/interpreter/templateInterpreterGenerator.cpp</code></p>

            <pre class="big noshadow fragment" data-fragment-index="1" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
address TemplateInterpreterGenerator::generate_method_entry(MethodKind kind) {
  switch (kind) {
  case Interpreter::HelloWorld_sayHello: entry_point = generate_sayHello();
...
  return entry_point;
]]>
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing an Interpreter Intrinsics</h2>

            <p style="text-align:left">Implement in: <code>src/cpu/x86/vm/templateInterpreterGenerator_x86_64.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
#define __ _masm->
address TemplateInterpreterGenerator::generate_sayHello() {
  // r13: sender sp
  // stack: [ ret adr ] <-- rsp
  address entry_point = __ pc();
  const char *msg = "Hello GeekOut!\n";
  __ mov64(c_rarg1, (long)stdout);
  __ mov64(c_rarg0, (long)msg);
  __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, fputs)));
  __ pop(rax);
  __ mov(rsp, r13);
  __ jmp(rax);
  return entry_point;
}
]]>
              </code>
            </pre>

          </section>

          <section style="height: 100%;">

            <h2>Implementing an Interpreter Intrinsics</h2>

            <p style="text-align:left">Enable in: <code>src/share/vm/oops/method.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
vmSymbols::SID Method::klass_id_for_intrinsics(const Klass* holder) {
  // if loader is not the default loader (i.e., != NULL), we can't know the
  // intrinsics because we are not loading from core libraries
  const InstanceKlass* ik = InstanceKlass::cast(holder);
<span class="fragment"><mark class="border-no-bottom">  if (GeekOut &amp;&amp; ik-&gt;name()-&gt;equals("io/simonis/HelloWorld")) {  // &lt;----  </mark>
<mark class="border-no-bottom-top">    // check for io.simonis.HelloWorld                          // &lt;----  </mark>
<mark class="border-no-bottom-top">    return vmSymbols::find_sid(ik-&gt;name());                     // &lt;----  </mark>
<mark class="border-no-top">  }                                                             // &lt;----  </mark></span>
  if ((ik-&gt;class_loader() != NULL)) {
    return vmSymbols::NO_SID;   // regardless of name, no intrinsics here
  }
  // see if the klass name is well-known:
  Symbol* klass_name = ik-&gt;name();
  return vmSymbols::find_sid(klass_name);
}
              </code>
            </pre>

          </section>

        </section>



        <section style="height: 100%;">

          <section>

            <h2>Implementing a C2-JIT Intrinsic</h2>

            <p style="text-align:left">Intrinsify: <code>java.util.Random.nextInt()</code> (by using Intel's <code>rdrand</code> instruction)</p>

            <pre class="big noshadow" data-trim="true">
              <code class="java" text-trim="true">
<![CDATA[
public class Random implements java.io.Serializable {
  ...
  @HotSpotIntrinsicCandidate                                                   
  public int nextInt() {
    return next(32);
  }
]]>
              </code>
            </pre>

            <p class="fragment" data-fragment-index="1" style="text-align:left">Define in: <code>src/share/vm/classfile/vmSymbols.hpp</code></p>

            <pre class="big noshadow fragment" data-fragment-index="1" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
do_class(     java_util_Random, "java/util/Random")                          \
do_intrinsic(_nextInt,          java_util_Random, nextInt_name, ni_sign, F_R)\
 do_name(     nextInt_name,     "nextInt")                                   \
 do_signature(ni_sign,          "()I")                                       \
]]>
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing a C2-JIT Intrinsic</h2>

            <p style="text-align:left">Detect <code>rdrand</code> instruction in: <code>src/cpu/x86/vm/vm_version_x86.hpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
class VM_Version {
  static uint64_t feature_flags() {
    if (_cpuid_info.std_cpuid1_ecx.bits.rdrand != 0)
      result |= CPU_RDRAND;

  static bool supports_rdrand() { return (_features & CPU_RDRAND) != 0; }
]]>
              </code>
            </pre>

            <p class="fragment" data-fragment-index="1" style="text-align:left">Implement <code>rdrand</code> in: <code>src/cpu/x86/vm/assembler_x86.hpp</code></p>

            <pre class="big noshadow fragment" data-fragment-index="1" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
void Assembler::rdrandl(Register dst) {
  int encode = prefix_and_encode(dst->encoding());                       
  emit_int8(0x0F);
  emit_int8((unsigned char)0xC7);
  emit_int8((unsigned char)(0xF0 | encode));
]]>
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing a C2-JIT Intrinsic</h2>

            <p style="text-align:left">Implement new IR-node in: <code>src/share/vm/opto/intrinsicnode.hpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
class RandINode : public Node {
public:
  RandINode(Node *c) : Node(c) {}
  const Type *bottom_type() const { return TypeInt::INT; }               
  virtual uint ideal_reg() const { return Op_RegI; }
]]>
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing a C2-JIT Intrinsic</h2>

            <p style="text-align:left">And corresponding Machine-node and match rule in: <code>src/cpu/x86/vm/x86.ad</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
instruct randI(rRegI dst) %{
  match(Set dst (RandI));
  format %{ "RANDI    $dst\t# int" %}                              
  ins_encode %{
    __ rdrandl($dst$$Register);
  %}
]]>
              </code>
            </pre>

            <pre class="big noshadow fragment" data-fragment-index="1" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
const bool Matcher::match_rule_supported(int opcode) {
  if (!has_match_rule(opcode)) return false;

  switch (opcode) {
  case Op_RandI: if (!VM_Version::supports_rdrand()) return false;
  ...
  return true;
]]>
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing a C2-JIT Intrinsic</h2>

            <p style="text-align:left">Use it in: <code>src/share/vm/opto/library_call.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
bool LibraryCallKit::try_to_inline(int predicate) {
  ...
  switch (intrinsic_id()) {                                              
  case vmIntrinsics::_nextInt: return inline_random(intrinsic_id());
]]>
              </code>
            </pre>

            <pre class="big noshadow fragment" data-fragment-index="1" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
bool LibraryCallKit::inline_random(vmIntrinsics::ID id) {
  Node* n = NULL;
  switch (id) {
  case vmIntrinsics::_nextInt:
    if (!Matcher::match_rule_supported(Op_RandI)) return false;          
    n = new RandINode(control());
  ...
  set_result(_gvn.transform(n));
]]>
              </code>
            </pre>
          </section>

          <section>

            <h2>Implementing a C2-JIT Intrinsic</h2>

<table class="calling_hirarchy">
  <tr>
    <td colspan="13" class="functionCall  indent_level_0">
      <code>CompileBroker::compiler_thread_loop()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="12">&nbsp;</td>
    <td colspan="12" class="functionCall  indent_level_1">
    <code>CompileBroker::invoke_compiler_on_method(task=0x7ffff01da940)</code>
    </td>
  </tr>
  <tr>
    <td rowspan="11">&nbsp;</td>
    <td colspan="11" class="functionCall  indent_level_2">
    <code>C2Compiler::compile_method(target=0x7fffc4299130)</code>
    </td>
  </tr>
  <tr>
    <td rowspan="10">&nbsp;</td>
    <td colspan="10" class="functionCall  indent_level_3">
    <code>Compile::Compile(compiler=0x7ffff01a0a60, target=0x7fffc4299130)</code>
    </td>
  </tr>
  <tr>
    <td rowspan="9">&nbsp;</td>
    <td colspan="9" class="functionCall  indent_level_4">
    <code>ParseGenerator::generate()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="8">&nbsp;</td>
    <td colspan="8" class="functionCall  indent_level_5">
    <code>Parse::Parse(caller=0x7fffc440de00, parse_method=0x7fffc4299130)</code>
    </td>
  </tr>
  <tr>
    <td rowspan="7">&nbsp;</td>
    <td colspan="7" class="functionCall  indent_level_6">
    <code>Parse::do_all_blocks()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="6">&nbsp;</td>
    <td colspan="6" class="functionCall  indent_level_7">
    <code>Parse::do_one_block()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="5">&nbsp;</td>
    <td colspan="5" class="functionCall  indent_level_8">
    <code>Parse::do_one_bytecode()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="4">&nbsp;</td>
    <td colspan="4" class="functionCall  indent_level_9">
    <code>Parse::do_call()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="3">&nbsp;</td>
    <td colspan="3" class="functionCall  indent_level_10">
    <code>LibraryIntrinsic::generate()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="2">&nbsp;</td>
    <td colspan="2" class="functionCall  indent_level_11">
    <code>LibraryCallKit::try_to_inline(id=vmIntrinsics::_nextInt)</code>
    </td>
  </tr>
  <tr>
    <td rowspan="1">&nbsp;</td>
    <td colspan="1" class="functionCall  indent_level_12">
    <code>LibraryCallKit::inline_random()</code>
    </td>
  </tr>
</table>
          </section>

          <section>
            <h2><code style="text-transform: none;">Random.nextInt()</code> - DEMO</h2>

            <pre class="big noshadow" data-trim="true">
              <code class="java" text-trim="true">
<![CDATA[
public class Random {

  static final java.util.Random sr = new SecureRandom();

  static int foo() {
    return sr.nextInt();
  }
  public static void main(String[] args) throws Exception {
    int count = Integer.parseInt(args.length > 0 ? args[0] : "10");
    int result = 0;
    for (int i = 0; i < count; i++) {
      result += foo();
    }
    System.out.println(result);
  }
}
]]>
              </code>
            </pre>
          </section>

          <section>
            <h2><code style="text-transform: none;">Random.nextInt()</code> - DEMO</h2>

            <pre class="big noshadow" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$ time java io.simonis.Random 1000000
<span class="fragment">-886841403

real	0m2.228s
user	0m2.144s
sys	0m0.088s</span>

<span class="fragment">$ time java -XX:DisableIntrinsic=_nextInt io.simonis.Random 1000000</span>
<span class="fragment">695536079

real	0m3.187s
user	0m2.708s
sys	0m0.472s</span>
              </code>
            </pre>
          </section>

          <section>
            <pre class="big noshadow" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$ java -XX:+PrintCompilation -XX:+PrintInlining io.simonis.Random 10000
<span class="fragment">...
 io.simonis.Random::foo (7 bytes)
   @ 3   java.util.Random::nextInt (7 bytes)   (intrinsic)</span>

<span class="fragment">$ java -XX:+PrintCompilation -XX:+PrintInlining -XX:DisableIntrinsic=_nextInt \
                                                     io.simonis.Random 10000</span>
<span class="fragment">...
 io.simonis.Random::foo (7 bytes)
   @ 3 java.util.Random::nextInt (7 bytes) inline (hot)
     @ 3 java.security.SecureRandom::next (61 bytes) inline (hot)
       @ 17 java.security.SecureRandom::nextBytes (9 bytes) inline (hot)
         @ 5 java.security.SecureRandomSpi::engineNextBytes (0 bytes) virtual call
...
 sun.security.provider.NativePRNG::engineNextBytes (8 bytes)
   @ 4 sun.security.provider.NativePRNG$RandomIO::access$400 (6 bytes) inline (hot)
     @ 2 sun.security.provider.NativePRNG$RandomIO::implNextBytes (162 bytes) already compiled into a big method</span>
              </code>
            </pre>
          </section>

          <section>
            <pre class="big noshadow" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$ java -XX:CompileCommand="option io.simonis.Random::foo PrintOptoAssembly" \
                                                   io.simonis.Random 10000
<span class="fragment">000   B1: #     N1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000     # stack bang (96 bytes)
        pushq   rbp             # Save rbp
        subq    rsp, #16        # Create frame

00c     <mark>RANDI    RAX</mark>            # int</span>

<span class="fragment">$ java -XX:CompileCommand="option io.simonis.Random::foo PrintAssembly" \
                                                   io.simonis.Random 10000</span>
<span class="fragment"> ;; B1: #       N1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
8c0: mov    %eax,-0x16000(%rsp)
8c7: push   %rbp
8c8: sub    $0x10,%rsp         ;*synchronization entry
                               ; - io.simonis.Random::foo@-1 (line 10)
8cc: <mark>rdrand %eax</mark>               ;*invokevirtual nextInt {reexecute=0 rethrow=0..
                               ; - io.simonis.Random::foo@3 (line 10)</span>
              </code>
            </pre>
          </section>

        </section>

        <section style="height: 100%;">

          <section>
            <h2 style="text-transform: none;"><code>System.arraycopy() - Bug</code></h2>
<!--
            <p style="text-align:center">..if any of the following is true, an IndexOutOfBoundsException is thrown..</p>

            <ul style="display:inline-block">
              <li>The <code>srcPos</code> argument is negative.</li>
              <li>The <code>destPos</code> argument is negative.</li>
              <li style="font-weight: bold;">The <code>length</code> argument is negative.</li>
              <li><code>srcPos+length</code> is greater than <code>src.length</code>.</li>
              <li><code>destPos+length</code> is greater than <code>dest.length</code>.</li>
            </ul>
-->
            <img width="100%" class="plain" data-src="images/System_arracopy_IOOBE.png" alt="System.arraycopy() API Definition"/>

            <p>see <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#arraycopy-java.lang.Object-int-java.lang.Object-int-int-">
                http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#arraycopy</a></p>

          </section>

          <section>
            <h2 style="text-transform: none;"><code>System.arraycopy() - Bug</code></h2>

            <pre class="big noshadow" data-trim="true">
              <code class="java" text-trim="true">
<![CDATA[
public class ArrayCopy {

  public static boolean arraycopy(Object[] src, int length) {
    try {
      System.arraycopy(src, 1, new Object[8], 1, length);
      return false;
    } catch (IndexOutOfBoundsException e) {
      return true;
    }
  }

  public static void main(String args[]){
    int count = Integer.parseInt(args[0]);

    for (int x = 0; x < count; x++) {
      if (arraycopy(new Object[8], -1) == false)
        throw new RuntimeException("Expected IndexOutOfBoundsException...");
]]>
              </code>
            </pre>
          </section>

          <section style="padding: 0; height: 100%;">
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$ java io.simonis.ArrayCopy 1000

<span class="fragment">$ java io.simonis.ArrayCopy 100000</span>
<span class="fragment">Exception in thread "main" java.lang.RuntimeException: \
  Expected IndexOutOfBoundsException for System.arracopy(.., -1)
	at io.simonis.ArrayCopy.main(ArrayCopy.java:19)</span>

<span class="fragment">$ java -XX:+PrintEscapeAnalysis -XX:+PrintEliminateAllocations \
                                                   io.simonis.ArrayCopy 100000</span>
<span class="fragment">======== Connection graph for  io.simonis.ArrayCopy::arraycopy
JavaObject NoEscape(NoEscape) <mark>40 AllocateArray</mark> = ArrayCopy::arraycopy @ bci:4
++++ <mark>Eliminated: 40 AllocateArray</mark>
Exception in thread "main" java.lang.RuntimeException: \
  Expected IndexOutOfBoundsException for System.arracopy(.., -1)
	at io.simonis.ArrayCopy.main(ArrayCopy.java:19)</span>

<span class="fragment">$ java -XX:+PrintEscapeAnalysis -XX:+PrintEliminateAllocations \
       -XX:-EliminateAllocations                   io.simonis.ArrayCopy 100000</span>
<span class="fragment">======== Connection graph for  io.simonis.ArrayCopy::arraycopy
JavaObject NoEscape(NoEscape) <mark>40 AllocateArray</mark> = ArrayCopy::arraycopy @ bci:4</span>
              </code>
            </pre>
          </section>

          <section style="padding: 0; height: 100%;">
<table class="calling_hirarchy">
  <tr>
    <td colspan="10" class="functionCall  indent_level_3">
      <code>Compile::Compile(compiler=0x7ffff01a0a60, target=0x7fffc4299130)</code>
    </td>
  </tr>
  <tr>
    <td rowspan="16">&nbsp;</td>
    <td colspan="9" class="functionCall  indent_level_4">
    <code>ParseGenerator::generate()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="8">&nbsp;</td>
    <td colspan="8" class="functionCall  indent_level_5">
      <code>Parse::Parse(caller=0x7fffc440de00, parse_method=0x7fffc4299130)</code>
    </td>
  </tr>
  <tr>
    <td rowspan="7">&nbsp;</td>
    <td colspan="7" class="functionCall  indent_level_6">
      <code>Parse::do_all_blocks()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="6">&nbsp;</td>
    <td colspan="6" class="functionCall  indent_level_7">
      <code>Parse::do_one_block()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="5">&nbsp;</td>
    <td colspan="5" class="functionCall  indent_level_8">
      <code>Parse::do_one_bytecode()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="4">&nbsp;</td>
    <td colspan="4" class="functionCall  indent_level_9">
      <code>Parse::do_call()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="3">&nbsp;</td>
    <td colspan="3" class="functionCall  indent_level_10">
      <code>LibraryIntrinsic::generate()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="2">&nbsp;</td>
    <td colspan="2" class="functionCall  indent_level_11">
      <code>LibraryCallKit::try_to_inline(id=vmIntrinsics::_arraycopy)</code>
    </td>
  </tr>
  <tr>
    <td rowspan="1">&nbsp;</td>
    <td colspan="1" class="functionCall  indent_level_12">
      <code><mark>LibraryCallKit::inline_arraycopy()</mark></code>
    </td>
  </tr>
  <tr>
    <td colspan="9" class="functionCall  indent_level_4">
      <code>Compile::optimze()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="6">&nbsp;</td>
    <td colspan="8" class="functionCall  indent_level_5">
    <code>PhaseMacroExpand::eliminate_macro_nodes()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="2">&nbsp;</td>
    <td colspan="7" class="functionCall  indent_level_6">
      <code>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*, ...)</code>
    </td>
  </tr>
  <tr>
    <td rowspan="1">&nbsp;</td>
    <td colspan="6" class="functionCall  indent_level_7">
      <code><mark>PhaseMacroExpand::process_users_of_allocation()</mark></code>
    </td>
  </tr>
  <tr>
    <td colspan="8" class="functionCall  indent_level_5">
      <code>PhaseMacroExpand::expand_macro_nodes()</code>
    </td>
  </tr>
  <tr>
    <td rowspan="2">&nbsp;</td>
    <td colspan="7" class="functionCall  indent_level_6">
    <code>PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*)</code>
    </td>
  </tr>
  <tr>
    <td rowspan="1">&nbsp;</td>
    <td colspan="6" class="functionCall  indent_level_7">
    <code><mark>PhaseMacroExpand::generate_arraycopy(ArrayCopyNode*, AllocateNode*, ...)</mark></code>
    </td>
  </tr>
</table>
          </section>

<!--

// ==============================inline_arraycopy=======================
// public static native void java.lang.System.arraycopy(Object src,  int  srcPos,
//                                                      Object dest, int destPos,
//                                                      int length);
bool LibraryCallKit::inline_arraycopy() {
  ...
  // The following tests must be performed
  // (1) src and dest are arrays.
  // (2) src and dest arrays must have elements of the same BasicType
  // (3) src and dest must not be null.
  // (4) src_offset must not be negative.
  // (5) dest_offset must not be negative.
  // (6) length must not be negative.
  // (7) src_offset + length must not exceed length of src.
  // (8) dest_offset + length must not exceed length of dest.
  // (9) each element of an oop array must be assignable
  ...
    // (5) dest_offset must not be negative.
    generate_negative_guard(dest_offset, slow_region);

    // (7) src_offset + length must not exceed length of src.
    generate_limit_guard(src_offset, length, load_array_length(src), slow_region);
  ...
  ArrayCopyNode* ac = ArrayCopyNode::make(...)


// Process users of eliminated allocation.
void PhaseMacroExpand::process_users_of_allocation(CallNode *alloc) {
  ...
  if (use->is_ArrayCopy()) {
    // Disconnect ArrayCopy node


Node* PhaseMacroExpand::generate_arraycopy(ArrayCopyNode *ac, AllocateArrayNode* alloc,
  ...
    // (6) length must not be negative.
    generate_negative_guard(&local_ctrl, copy_length, slow_region);


-->

          <section style="padding: 0; height: 100%;">

            <p style="text-align:left; margin: 0;"><code>src/share/vm/opto/library_call.cpp</code></p>

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
// System.arraycopy(Object src,int srcPos,Object dest,int destPos,int length);
bool LibraryCallKit::inline_arraycopy() {
  ...
  // The following tests must be performed
  // (1) src and dest are arrays.
  // (2) src and dest arrays must have elements of the same BasicType
  // (3) src and dest must not be null.
  // (4) src_offset must not be negative.
  // (5) dest_offset must not be negative.
  // (6) length must not be negative.
  // (7) src_offset + length must not exceed length of src.
  ...
    // (5) dest_offset must not be negative.
    generate_negative_guard(dest_offset, slow_region);

    // (7) src_offset + length must not exceed length of src.
    generate_limit_guard(src_offset, length, load_array_length(src), slow_reg);
  ...
  ArrayCopyNode* ac = ArrayCopyNode::make(...)

]]>
              </code>
            </pre>
          </section>


          <section style="padding: 0; height: 100%;">

            <p style="text-align:left; margin: 0;"><code>src/share/vm/opto/macro.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
// Process users of eliminated allocation.
void PhaseMacroExpand::process_users_of_allocation(CallNode *alloc) {           
  ...
  if (use->is_ArrayCopy()) {
    // Disconnect ArrayCopy node
    ArrayCopyNode* ac = use->as_ArrayCopy();
    ...
    // Disconnect src right away: it can help find new opportunities ...
    Node* src = ac->in(ArrayCopyNode::Src);
]]>
              </code>
            </pre>

            <p style="text-align:left"><code>src/share/vm/opto/macroArrayCopy.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
// This routine is used from several intrinsics:  System.arraycopy,
// Object.clone (the array subcase), and Arrays.copyOf[Range].
Node* PhaseMacroExpand::generate_arraycopy(ArrayCopyNode *ac, AllocateArrayNode*
  ...
  // (6) length must not be negative.
  generate_negative_guard(&local_ctrl, copy_length, slow_region);

]]>
              </code>
            </pre>
          </section>

          <section>
            <h3 style="text-transform: none;"><a href="https://bugs.openjdk.java.net/browse/JDK-8159611">https://bugs.openjdk.java.net/browse/JDK-8159611</a></h3>
            <img class="plain" data-src="images/8159611_ArrayCopy.png" alt="JDK-8159611: C2: ArrayCopy elimination skips required parameter checks"/>
          </section>

        </section>

        <section>

          <h3 style="text-transform: none;"><a href="https://github.com/simonis/GeekOut2018">https://github.com/simonis/GeekOut2018</a></h3>

          <h3 style="text-transform: none;"><a href="https://simonis.github.io/GeekOut2018">https://simonis.github.io/GeekOut2018</a></h3>

        </section>

      </div>

    </div>

    <script src="reveal.js/lib/js/head.min.js"></script>
    <script src="reveal.js/js/reveal.js"></script>

    <script>

      // Full list of configuration options available at:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        //width: 1024,
        //height: 768,
        //width: 1280,
        //height: 720,
        width: 1366,
        height: 768,
        //width: 1920,
        //height: 1080,
        margin: 0.1,
        controls: true,
        progress: true,
        history: true,
        center: true,
        slideNumber: true,

        transition: 'none', // none/fade/slide/convex/concave/zoom

        // Optional reveal.js plugins
        dependencies: [
          { src: 'reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'reveal.js/plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() {

hljs.registerLanguage('terminal', function(hljs) {
  return {
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      {
        className: 'title',
        lexemes: /[$()>_a-zA-Z0-9]+/,
        keywords: "$ (gdb) hsdb>",
        begin: /^\$ |\(gdb\)|hsdb> /,
        end: /[^\\]\n/,
	contains: [
          hljs.COMMENT('//', '$', { endsParent: true })
	]
      }
    ]
  }
});

hljs.initHighlightingOnLoad(); } },
          { src: 'reveal.js/plugin/zoom-js/zoom.js', async: true },
          { src: 'reveal.js/plugin/notes/notes.js', async: true }
        ]
      });

      //Reveal.configure({ slideNumber: true });
    </script>

  </body>
</html>

<!--  LocalWords:  HotSpot scrollable px pre noshadow Volker Simonis builtin VM
 -->
<!--  LocalWords:  Observability Bytecode runtime bytecodes Ljava sayHello ns
 -->
<!--  LocalWords:  GeekOut JVMTI JNI fPIC JDK traceMethodAgent cpp TTS Safepoint
 -->
<!--  LocalWords:  unboxing JIT JVM safepoints Intrinsify
 -->
