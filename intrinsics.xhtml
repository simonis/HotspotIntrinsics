<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

  <head>
    <meta charset="utf-8" />

    <title>HotSpot Intrinsics</title>

    <meta name="description" content="A short introduction to HotSpot Intrinsics" />
    <meta name="author" content="Volker H. Simonis" />

    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui" />

    <link rel="stylesheet" href="reveal.js/css/reveal.css" />
    <link rel="stylesheet" href="reveal.js/css/theme/joker2017.css" id="theme" />
    <!-- Code syntax highlighting -->
    <link rel="stylesheet" href="reveal.js/lib/css/monokai_sublime.css" />
    <!-- Local overrides -->
    <link rel="stylesheet" href="css/local.css" />

  <style type="text/css">
.scrollable {
    bottom: 0px;
    overflow-y: auto  !important;
    overflow-x: hidden !important;
}

.reveal .big {
    font-size: .8em;
    line-height: 1.3em;
}

.reveal pre.console {
    background-color: black;
    color: #00ff00;
}

code.terminal .hljs-title {
    color: #00ff00;
}

.reveal pre.noshadow {
    border-radius: 0;
    box-shadow: unset;
}

.reveal pre code {
    max-height: 98%;
}
.bold {
    font-weight: bold;
}

  table.calling_hirarchy {
//    font-family: monospace, arial, helvetica, sans-serif;
//    background-color: #ffffff;
    font-size: smaller;
    border-collapse: collapse;
    margin: 0px auto;
    padding: 2px;
    width: auto;
    overflow: auto;
    border: none;
  }

  table.calling_hirarchy tr {
    border: none;
  }

  table.calling_hirarchy td {
    padding: 5px;
//    font-family: monospace;
  }

  table.calling_hirarchy td.fixed {
    width: 1ex;
  }

  td.indent_level_0 {
    border-style: solid;
    border-width: 2px;
    background-color: #a0a0a0;
  }
  td.indent_level_1 {
    border-style: solid;
    border-width: 2px;
    background-color: #a8a8a8;
  }
  td.indent_level_2 {
    border-style: solid;
    border-width: 2px;
    background-color: #b0b0b0;
  }
  td.indent_level_3 {
    border-style: solid;
    border-width: 2px;
    background-color: #b8b8b8;
  }
  td.indent_level_4 {
    border-style: solid;
    border-width: 2px;
    background-color: #c0c0c0;
  }
  td.indent_level_5 {
    border-style: solid;
    border-width: 2px;
    background-color: #c8c8c8;
  }
  td.indent_level_6 {
    border-style: solid;
    border-width: 2px;
    background-color: #d0d0d0;
  }
  td.indent_level_7 {
    border-style: solid;
    border-width: 2px;
    background-color: #d8d8d8;
  }
  td.indent_level_8 {
    border-style: solid;
    border-width: 2px;
    background-color: #e0e0e0;
  }
  td.indent_level_9 {
    border-style: solid;
    border-width: 2px;
    background-color: #e8e8e8;
  }
  td.indent_level_10 {
    border-style: solid;
    border-width: 2px;
    background-color: #f0f0f0;
  }
  td.indent_level_11 {
    border-style: solid;
    border-width: 2px;
    background-color: #f8f8f8;
  }
  td.indent_level_12 {
    border-style: solid;
    border-width: 2px;
    background-color: #ffffff;
  }
  td.indent_level_13 {
    border-style: solid;
    border-width: 2px;
    background-color: #ffffff;
  }
  td.indent_level_14 {
    border-style: solid;
    border-width: 2px;
    background-color: #ffffff;
  }
  td.indent_level_15 {
    border-style: solid;
    border-width: 2px;
    background-color: #ffffff;
  }
  td.indent_level_16 {
    border-style: solid;
    border-width: 2px;
    background-color: #ffffff;
  }
  td.indent_level_17 {
    border-style: solid;
    border-width: 2px;
    background-color: #ffffff;
  }
  td.indent_level_18 {
    border-style: solid;
    border-width: 2px;
    background-color: #ffffff;
  }
  td.functionCall {
//    font-weight: bold;
    color: darkblue;
  }
  td.javaCall {
    font-weight: bold;
    color: darkgreen;
  }
  td.comment {
    font-style: italic;
    color: maroon;
  }
  td.highlight {
    border-style: solid;
    border-width: 2px;
    background-color: #a0ffa0;
  }
  table.calling_hirarchy td[rowspan] {
    border-style: none;
    border-width: 0;
    border-left: dotted;
    border-left-width: 2px;
  }

/* The Quiz (background) */
.reveal .slides section .quiz {
    display: none; /* Hidden by default */
}

.reveal .slides section .fragment.quiz {
    display: none; /* Hidden by default */
}

.reveal .slides section .fragment.quiz.current-fragment {
    display: block;
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    padding-top: 100px; /* Location of the box */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
}

/* Quiz Content */
.reveal .slides section .quiz-content {
    display: inline-block;
    position: relative;
    background-color: #fefefe;
    margin: auto;
    padding: 0;
    border: 1px solid #888;
    width: auto;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
    -webkit-animation-name: animatetop;
    -webkit-animation-duration: 0.4s;
    animation-name: animatetop;
    animation-duration: 0.4s
}

/* Add Animation */
@-webkit-keyframes animatetop {
    from {top:-300px; opacity:0}
    to {top:0; opacity:1}
}

@keyframes animatetop {
    from {top:-300px; opacity:0}
    to {top:0; opacity:1}
}

.reveal .slides section .quiz-header {
    padding: 12px 12px;
    background-color: #7571ff;
/*  background-color: #5cb85c; */
    color: white;
}

.reveal .slides section .quiz-header h2 {
    margin: 0;
}

.reveal .slides section .quiz-body {
    padding: 12px 16px;
    color: #3f3f3f;
}

.reveal .slides section .quiz-body li:not(:last-child) {
    margin-bottom: 15px;
}

.reveal .slides section .quiz-footer {
    padding: 12px 16px;
    background-color: #7571ff;
/*  background-color: #5cb85c; */
    color: white;
}
  </style>

    <!-- Printing and PDF exports -->
    <script>
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'reveal.js/css/print/pdf.css' : 'reveal.js/css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    </script>

    <!--[if lt IE 9]>
    <script src="reveal.js/lib/js/html5shiv.js"></script>
    <![endif]-->

    <!--
      Issue #1105: Keyboard shortcut to skip forward/back over fragments #1173
      https://github.com/hakimel/reveal.js/pull/1173
    -->
  </head>

<!--
;; indent block of text
;; C-u <number> C-x <TAB>



;; select this code and do 'M-x eval-region'
(defun make-fragment (p1 p2)
  "Wraps the selection into 'fragment' <span>s and quotes '&', '<' and '>'."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq inputStr (replace-regexp-in-string "&" "&amp;" inputStr))
  (setq inputStr (replace-regexp-in-string "<" "&lt;" inputStr))
  (setq inputStr (replace-regexp-in-string ">" "&gt;" inputStr))
  (setq resultStr (concat "<span class=\"fragment\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun make-fragment-highlight-current-border (p1 p2)
  "Wraps the selection into 'fragment highlight-current-border' <span>s and quotes '&', '<' and '>'."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq inputStr (replace-regexp-in-string "&" "&amp;" inputStr))
  (setq inputStr (replace-regexp-in-string "<" "&lt;" inputStr))
  (setq inputStr (replace-regexp-in-string ">" "&gt;" inputStr))
  (setq resultStr (concat "<span class=\"fragment highlight-current-border\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun make-fragment-simple (p1 p2)
  "Wraps the selection into 'fragment' <span>s without any quoting."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq resultStr (concat "<span class=\"fragment\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun quote-fragment (p1 p2)
  "Quotes '&', '<' and '>'."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq inputStr (replace-regexp-in-string "&" "&amp;" inputStr))
  (setq inputStr (replace-regexp-in-string "<" "&lt;" inputStr))
  (setq inputStr (replace-regexp-in-string ">" "&gt;" inputStr))
  (delete-region p1 p2)
  (insert inputStr)
)

(global-set-key (kbd "C-f") 'make-fragment)
(global-set-key (kbd "C-รถ") 'make-fragment-highlight-current-border)
(global-set-key (kbd "C-S-f") 'make-fragment-simple)
(global-set-key (kbd "C-S-q") 'quote-fragment)
;; revert key-binding
;; (global-set-key (kbd "C-f") 'forward-char)
;;
;; use 'C-h k <keystroke>' to find out what <keystroke> is currently bound to

;; (vhs) The following is required to make 'C-c C-t' insert <code> tags without
;; newlines. 'sgml-tag-alist' is the "file-local" version of 'html-tag-alist'
(add-to-list 'html-tag-alist '("code"))
(add-to-list 'sgml-tag-alist '("code"))

;; Use 'M-x sgml-tags-invisible' to hide/display HTML/SGML tags
-->

  <body>

    <div class="reveal">

      <!-- Any section element inside of this container is displayed as a slide -->
      <div class="slides">

        <section class="center">
          <h1>HotSpot Intrinsics<br/></h1>
          <p>
            <small>Volker Simonis, SAP / <a href="mailto:volker.simonis@gmail.com">volker.simonis@gmail.com</a> / <a href="https://twitter.com/volker_simonis">@volker_simonis</a></small>
          </p>
        </section>


        <section class="center">

          <h3 style="text-transform: none;"><a href="https://github.com/simonis/GeekOut2018">https://github.com/simonis/GeekOut2018</a></h3>

          <h3 style="text-transform: none;"><a href="https://simonis.github.io/GeekOut2018">https://simonis.github.io/GeekOut2018</a></h3>

        </section>


        <section class="center">

          <h2>Intrinsics</h2>

          <blockquote>
            <p style="text-align:justify">
              &ldquo; ..an <span class="bold">intrinsic</span> function (a.k.a.
              <span class="bold">builtin</span> function) is a function
              available for use in a given programming language whose
              implementation is handled specially by the compiler. Typically, it
              substitutes a sequence of automatically generated instructions for
              the original function call.. &rdquo;
            </p>
          </blockquote>

          <blockquote>
            <p style="text-align:justify">
              &ldquo; ..the compiler has an intimate knowledge of the intrinsic
              function and can therefore better integrate it and optimize it for
              the situation.. &rdquo;
            </p>
            <footer>
              <cite><a href="https://en.wikipedia.org/wiki/Intrinsic_function">Intrinsic function - Wikipedia</a></cite>
            </footer>
          </blockquote>

        </section>


        <section>

          <h2>Intrinsics</h2>

          <ul>
            <li>Improve performance:<br/>
              <pre class="big noshadow" data-trim="true">
                <code class="java" text-trim="true">
<![CDATA[
GCC:  bzero(), snprintf(), strndup(), log2(), ..       
Java: Math.sqrt(), System.arraycopy(), ..
]]>
                </code>
              </pre>
            </li>
            <li>Expose functionality not expressable in the language itself:<br/>
              <pre class="big noshadow" data-trim="true">
                <code class="java" text-trim="true">
<![CDATA[
GCC:  _xbegin(), _xend(), ..     // Transactional Memory
Java: Unsafe.allocateInstance(),
      Thread.onSpinWait()        // JEP 285
]]>
                </code>
              </pre>
            </li>
            <li>Direct access to CPU instructions (assembler):<br/>
              <pre class="big noshadow" data-trim="true">
                <code class="java" text-trim="true">
<![CDATA[
MSVC: __movsq(), __mul128()                            
Java: Unsafe.loadFence()
]]>
                </code>
              </pre>
              <br/>
              <a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide">https://software.intel.com/sites/landingpage/IntrinsicsGuide</a>
            </li>
          </ul>

        </section>


        <section>
          <section>
            <h2>The &ldquo;<code>HelloWorld</code>&rdquo; Intrinsic</h2>

            <pre class="big noshadow" data-trim="true">
              <code class="java" data-trim="true" data-noescape="true">
public class HelloWorld {

  // Intrinsify if running with -XX:+GeekOut
  public static void <span class="fragment highlight-current-border">sayHello()</span> {
      System.out.println(<span class="fragment highlight-current-border">"Hello GeekOut!"</span>);
  }

  public static void main(String ... args) {

    long start = System.nanoTime();
    <span class="fragment highlight-current-border">sayHello()</span>;
    long stop = System.nanoTime();

    System.out.format("%,9d%s%n", stop - start, "ns");
  }
}
              </code>
            </pre>
          </section>

          <section>

            <pre class="big noshadow" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$<span class="fragment"> javac io/simonis/HelloWorld.java
$</span> <span class="fragment">java  io.simonis.HelloWorld
Hello GeekOut!
<span class="fragment highlight-current-border">1,368,398ns</span>

$</span> <span class="fragment">java <span class="fragment highlight-current-border">-XX:+GeekOut</span> io.simonis.HelloWorld
Hello GeekOut!
   <span class="fragment highlight-current-border">83,191ns</span>

$</span> <span class="fragment">sed -i 's/<span class="fragment highlight-current-border">Hello GeekOut</span>/<span class="fragment highlight-current-border">Hello World</span>/g' <span class="fragment highlight-current-border">io/simonis/HelloWorld.java</span>
$</span> <span class="fragment">javac io/simonis/HelloWorld.java
$</span> <span class="fragment">java  io.simonis.HelloWorld
<span class="fragment highlight-current-border">Hello World!</span>
1,483,216ns

$</span> <span class="fragment">java <span class="fragment highlight-current-border">-XX:+GeekOut</span> io.simonis.HelloWorld
<span class="fragment highlight-current-border">Hello GeekOut!</span>
   82,514ns</span>
              </code>
            </pre>
          </section>
        </section>


        <section style="height: 100%;">

          <section class="center">
            <h2>Observability - Bytecode Instrumentation</h2>

            <ul>
              <li>Allows dynamic changes of Java Bytecodes at runtime</li>
              <li>Only addition of bytecodes to Java methods</li>
              <li>Used by monitoring agents, profilers, coverage tools and event loggers</li>
              <li>Implemented in <code>java.lang.instrument</code></li>
              <li>Loaded into the VM with <code>-javaagent:jarpath[=options]</code></li>
              <li>The agent implements "<code>premain(String args, Instrumentation inst)</code>"</li>
            </ul>

          </section>

          <section style="height: 100%;">

            <h2>The Java Instrumentation Agent</h2>

            <pre class="big noshadow scrollable" style="height: 80%;" data-trim="true">
              <code class="java" text-trim="true" data-noescape="true">
<![CDATA[
package io.simonis;

import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.IllegalClassFormatException;
import java.lang.instrument.Instrumentation;
import java.security.ProtectionDomain;

import jdk.internal.org.objectweb.asm.ClassReader;
import jdk.internal.org.objectweb.asm.ClassVisitor;
import jdk.internal.org.objectweb.asm.ClassWriter;
import jdk.internal.org.objectweb.asm.MethodVisitor;
import jdk.internal.org.objectweb.asm.Opcodes;

public class MethodInstrumentationAgent {

  static String pattern;

  public static void premain(String args, Instrumentation inst) {
    inst.addTransformer(new MethodInstrumentorTransformer());
    pattern = args;
  }

  static class MethodInstrumentorTransformer implements ClassFileTransformer {

    @Override
    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,
        ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
      ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
      MethodInstrumentorClassVisitor cv = new MethodInstrumentorClassVisitor(cw);
      ClassReader cr = new ClassReader(classfileBuffer);
      cr.accept(cv, 0);
      return cw.toByteArray();
    }

  }

  static class MethodInstrumentorClassVisitor extends ClassVisitor {
    private String className;

    public MethodInstrumentorClassVisitor(ClassVisitor cv) {
      super(Opcodes.ASM5, cv);
    }

    @Override
    public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
      cv.visit(version, access, name, signature, superName, interfaces);
      className = name;
    }

    @Override
    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
      MethodVisitor mv = cv.visitMethod(access, name, desc, signature, exceptions);
      if (className.startsWith(pattern)) {
        mv = new MethodInstrumentorMethodVisitor(mv, name + desc);
      }
      return mv;
    }
  }

  static class MethodInstrumentorMethodVisitor extends MethodVisitor implements Opcodes {
    private String methodName;

    public MethodInstrumentorMethodVisitor(MethodVisitor mv, String name) {
      super(Opcodes.ASM5, mv);
      methodName = name;
    }

    @Override
    public void visitCode() {
      mv.visitCode();
      mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
      mv.visitLdcInsn("-> " + methodName);
      mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
    }

    @Override
    public void visitInsn(int opcode) {
      if ((opcode >= IRETURN && opcode <= RETURN) || opcode == ATHROW) {
        mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
        mv.visitLdcInsn("<- " + methodName);
        mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);
      }
      mv.visitInsn(opcode);
    }
  }
}
]]>
              </code>
            </pre>
          </section>
<!---
          <section>

            <p>The Manifest file:</p>

            <pre class="big noshadow" data-trim="true">
              <code class="java" text-trim="true">
<![CDATA[
Manifest-VErsion: 1.0
Premain-Class: io.simonis.MethodInstrumentationAgent
]]>
              </code>
            </pre>

            <p>Compile and create with:</p>

            <pre class="big noshadow" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$ javac -XDignore.symbol.file=true io/simonis/MethodInstrumentationAgent.java

$ jar cvfm MetInstAgent.jar manifest.mf \
                            io/simonis/MethodInstrumentationAgent*.class
              </code>
            </pre>

          </section>
-->
          <section>
            <h2>Observability - Bytecode Instrumentation</h2>


            <pre class="big noshadow" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$ java <span class="fragment highlight-current-border" data-fragment-index="1">-javaagent:MetInstAgent.jar</span>=<span class="fragment highlight-current-border" data-fragment-index="2">io/simonis</span> io.simonis.HelloWorld
<span class="fragment" data-fragment-index="3">-&gt; main([Ljava/lang/String;)V</span>
<span class="fragment" data-fragment-index="4">-&gt; sayHello()V
Hello GeekOut!</span>
<span class="fragment" data-fragment-index="5">&lt;- sayHello()V
  <span class="fragment highlight-border" data-fragment-index="11">651,538ns</span></span>
<span class="fragment" data-fragment-index="6">&lt;- main([Ljava/lang/String;)V</span>

<span class="fragment" data-fragment-index="7">$ java <span class="fragment highlight-current-border" data-fragment-index="8">-XX:+GeekOut</span> -javaagent:MetInstAgent.jar=io/simonis io.simonis.HelloWorld</span>
<span class="fragment" data-fragment-index="9">-&gt; main([Ljava/lang/String;)V
Hello GeekOut!
   51,750ns</span>
<span class="fragment" data-fragment-index="10">&lt;- main([Ljava/lang/String;)V</span>
              </code>
            </pre>

<div class="quiz fragment" data-fragment-index="12">
  <!-- Quiz content -->
  <div class="quiz-content">
    <div class="quiz-header">
      <h2>Why is the instrumented code faster ?</h2>
    </div>
    <div class="quiz-body">
      <table>
        <tr><td>Without</td><td>instrumentation</td><td style="text-align:right"><b>1,368,398</b> ns</td></tr>
        <tr><td>With   </td><td>instrumentation</td><td style="text-align:right">  <b>651,538</b> ns</td></tr>
      </table>
    </div>
    <div class="quiz-footer">
      &nbsp;
    </div>
  </div>
</div>

          </section>

        </section>


        <section style="height: 100%;">

          <section class="center">
            <h2>Observability - JVMTI Agents</h2>

            <ul>
              <li>JVMTI is the Java Virtual Machine Tool Interface</li>
              <li>Allows programs to inspect the state and control the execution of the VM</li>
              <li>Used by debuggers and profilers</li>
              <li>A native interface to the Java VM</li>
              <li>JVMTI agents are loaded during VM initialization</li>
              <li>They access the VM by calling JVMTI and JNI functions</li>
            </ul>
          </section>

          <section style="height: 100%;">

            <h2>A simple tracing JVMTI Agent</h2>

            <pre class="big noshadow scrollable" style="height: 80%;" data-trim="true">
              <code class="cpp" text-trim="true" data-noescape="true">
<![CDATA[
// Build as follows:
// g++ -fPIC -shared -I <JDK>/include/ -I <JDK>/include/linux/ -o trMethAgent.so traceMethodAgent.cpp
#include <jvmti.h>
#include <stdio.h>
#include <string.h>

const char* pattern = "";

static void printMethod(jvmtiEnv* jvmti, jmethodID method, const char* prefix) {
  char *name, *sig, *cl;
  jclass javaClass;
  jvmti->GetMethodDeclaringClass(method, &javaClass);
  jvmti->GetClassSignature(javaClass, &cl, NULL);
  ++cl; // Ignore leading 'L'
  if (strstr(cl, pattern) == cl) {
    jvmti->GetMethodName(method, &name, &sig, NULL);
    cl[strlen(cl) - 1] = '\0'; // Strip trailing ';'
    fprintf(stdout, "%s %s::%s%s\n", prefix, cl, name, sig);
    fflush (NULL);
    jvmti->Deallocate((unsigned char*) name);
    jvmti->Deallocate((unsigned char*) sig);
  }
  jvmti->Deallocate((unsigned char*) --cl);
}

void JNICALL methodEntryCallback(jvmtiEnv* jvmti, JNIEnv* jni, jthread thread, jmethodID method) {
  printMethod(jvmti, method, "->");
}

void JNICALL methodExitCallback(jvmtiEnv* jvmti, JNIEnv* jni, jthread thread, jmethodID method, jboolean except, jvalue ret_val) {
  printMethod(jvmti, method, "<-");
}

extern "C"
JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM* jvm, char* options, void* reserved) {
  jvmtiEnv* jvmti = NULL;
  jvmtiCapabilities capa;
  jvmtiError error;

  if (options) pattern = strdup(options); // Options may contain the pattern

  jint result = jvm->GetEnv((void**) &jvmti, JVMTI_VERSION_1_1);
  if (result != JNI_OK) {
    fprintf(stderr, "Can't access JVMTI!\n");
    return JNI_ERR;
  }

  memset(&capa, 0, sizeof(jvmtiCapabilities));
  capa.can_generate_method_entry_events = 1;
  capa.can_generate_method_exit_events = 1;
  if (jvmti->AddCapabilities(&capa) != JVMTI_ERROR_NONE) {
    fprintf(stderr, "Can't set capabilities!\n");
    return JNI_ERR;
  }
  jvmtiEventCallbacks callbacks;
  memset(&callbacks, 0, sizeof(jvmtiEventCallbacks));
  callbacks.MethodEntry = methodEntryCallback;
  callbacks.MethodExit = methodExitCallback;
  if (jvmti->SetEventCallbacks(&callbacks, sizeof(jvmtiEventCallbacks)) != JVMTI_ERROR_NONE) {
    fprintf(stderr, "Can't set event callbacks!\n");
    return JNI_ERR;
  }
  if (jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_METHOD_ENTRY, NULL) != JVMTI_ERROR_NONE) {
    fprintf(stderr, "Can't enable JVMTI_EVENT_METHOD_ENTRY!\n");
    return JNI_ERR;
  }
  if (jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_METHOD_EXIT, NULL) != JVMTI_ERROR_NONE) {
    fprintf(stderr, "Can't enable JVMTI_EVENT_METHOD_EXIT!\n");
    return JNI_ERR;
  }
}
]]>
              </code>
            </pre>
          </section>

          <section>
            <h2>Observability - JVMTI Agents</h2>

            <pre class="big noshadow" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$ java <span class="fragment highlight-current-border" data-fragment-index="1">-agentpath:trMethAgent.so</span>=<span class="fragment highlight-current-border" data-fragment-index="2">io/simonis</span> io.simonis.HelloWorld
<span class="fragment" data-fragment-index="3">-&gt; io/simonis/HelloWorld::main([Ljava/lang/String;)V</span>
<span class="fragment" data-fragment-index="4">-&gt; io/simonis/HelloWorld::sayHello()V
Hello GeekOut!</span>
<span class="fragment" data-fragment-index="5">&lt;- io/simonis/HelloWorld::sayHello()V
<span class="fragment highlight-current-border" data-fragment-index="11">24,256,161ns</span></span>
<span class="fragment" data-fragment-index="6">&lt;- io/simonis/HelloWorld::main([Ljava/lang/String;)V</span>

<span class="fragment" data-fragment-index="7">$ java <span class="fragment highlight-current-border" data-fragment-index="8">-XX:+GeekOut</span> -agentpath:trMethAgent.so=io/simonis io.simonis.HelloWorld</span>
<span class="fragment" data-fragment-index="9">-&gt; io/simonis/HelloWorld::main([Ljava/lang/String;)V
Hello GeekOut!
  171,417ns</span>
<span class="fragment" data-fragment-index="10">&lt;- io/simonis/HelloWorld::main([Ljava/lang/String;)V</span>
              </code>
            </pre>
          </section>

          <section class="center">
            <h1><code>jdb</code> Demo</h1>
          </section>
        </section>


        <section class="demo">
          <div width="100%" style="position: relative; margin: 0 0 0 0px;">
            <div class="" style="position: static; width: 100%">
              <a href="https://bugs.openjdk.java.net/browse/JDK-8013579">
                <object data="images/8013579_intrinsics_class_redef_new.png" type="image/png"
                        style="width: 90%;">&nbsp;</object>
              </a>
            </div>
            <div class="fragment" data-fragment-index="1" style="position: absolute; left: 0; top: 0; width: 100%">
              <a href="https://bugs.openjdk.java.net/browse/JDK-8013579">
                <object data="images/8013579_intrinsics_class_redef_new_marked.png" type="image/png"
                        style="width: 90%;">&nbsp;</object>
              </a>
            </div>
          </div>
        </section>

        <section style="height: 100%;">

          <section>
            <h2>Math Intrinsics</h2>

            <pre class="big noshadow" data-trim="true">
              <code class="java" data-trim="true" data-noescape="true">
static double compute(int <span class="fragment highlight-current-border" data-fragment-index="1">count</span>, double <span class="fragment highlight-current-border" data-fragment-index="2">d</span>) {
  for (int i = 0; i &lt; <span class="fragment highlight-current-border" data-fragment-index="1">count</span>; i++) {
    <span class="fragment highlight-current-border" data-fragment-index="2">d</span> += Math.pow(Math.sin(<span class="fragment highlight-current-border" data-fragment-index="2">d</span>), Math.sqrt(<span class="fragment highlight-current-border" data-fragment-index="2">d</span>)); // d += sin(d) ^ sqrt(d)
  }
  return <span class="fragment highlight-current-border" data-fragment-index="2">d</span>;
}

public static void main(String[] args) throws Exception {
  double  <span class="fragment highlight-current-border" data-fragment-index="3">seed</span> = args.length;                 // Avoid constant folding
  int    <span class="fragment highlight-current-border" data-fragment-index="4">count</span> = Integer.parseInt(args[0]);   // Iteration count for compute()

  for (int i = 0; i &lt; 20_000; i++) {
    <span class="fragment highlight-current-border" data-fragment-index="5">compute</span>(<span class="fragment highlight-current-border" data-fragment-index="5">1</span>, <span class="fragment highlight-current-border" data-fragment-index="3">seed</span>);                         // JIT-compile compute()
  }

  <span class="fragment highlight-current-border" data-fragment-index="6">compute</span>(<span class="fragment highlight-current-border" data-fragment-index="6">count</span>, <span class="fragment highlight-current-border" data-fragment-index="3">seed</span>);                       // Call compute() with huge count
}
              </code>
            </pre>
          </section>

          <section class="center">
            <h1>Math Intrinsics Demo</h1>
          </section>

          <section>
            <h2>Math Intrinsics &amp; Time To Safepoint (TTS)</h2>

            <pre class="big noshadow" data-trim="true">
              <code class="java" data-trim="true" data-noescape="true">
public static void main(String[] args) throws Exception {
  ...                                         // Same as before ...

  <span class="fragment highlight-current-border">new Thread()</span> {                              // Create a new thread..
    { setDaemon(true); }                      // ..and make it a daemon thread.
    public void run() {
      <span class="fragment highlight-current-border">while (true)</span> {
        try {
          <span class="fragment highlight-current-border">Thread.sleep(1_000)</span>;                // Every second..
        } catch (InterruptedException e) {}
        <span class="fragment highlight-current-border">System.gc()</span>;                          // ..we trigger a GC.
      }
    }
  }.start();                                  // Let it run concurrently.

  <span class="fragment highlight-current-border">compute(count, seed)</span>;                       // Call compute() with huge count
              </code>
            </pre>
          </section>

          <section class="center">
            <h1>Safepoint Demo</h1>
          </section>

          <section>
            <h3 style="text-transform: none;"><code>-XX:+UseCountedLoopSafepoints</code><a href="https://bugs.openjdk.java.net/browse/JDK-6869327"> (JDK-6869327)</a></h3>
            <img class="plain" data-src="images/6869327_counted_loop_safep.png" alt="JDK-6869327: Add new C2 flag to keep safepoints in counted loops"/>
          </section>

          <section>
            <h2><a href="https://player.vimeo.com/video/221265923">GeekOut 2017: HotSpot Internals - Signals, Safepoints...</a></h2>
            <a href="https://player.vimeo.com/video/221265923"><img class="plain" data-src="images/GeekOut2017_HotspotInternals.jpg" alt="GeekOut 2017: HotSpot Internals - Signals, Safepoints and NullPointers"/></a>
          </section>

<!--
6869327: Add new C2 flag to keep safepoints in counted loops.
-XX:+UseCountedLoopSafepoints
6869327_counted_loop_safep.png
-->

        </section>


        <section style="height: 100%;">

          <section style="height: 100%;">
            <h2>HotSpot Intrinsics</h2>

            <h3 class="fragment"><b style="color: red;">DISCLAIMER:</b> <b><em>Only for system classes</em></b> <b style="color: red;">!!!</b></h3>

            <ul>
              <span class="fragment"><li>Must be annotated with <code>jdk.internal.HotSpotIntrinsicCandidate</code> (since Java 9)
                  <ul>
                    <li>Checked by <code>-XX:+CheckIntrinsics</code> (on by default)<br/>&nbsp;</li>
                  </ul>
              </li></span>
              <span class="fragment"><li>Defined in: <code>share/classfile/vmSymbols.hpp</code><br/>&nbsp;</li></span>
              <span class="fragment"><li>Library intrinsics (~260)
                  <ul>
                    <li>Library methods replaced by assembly, IR or both<br/>&nbsp;</li>
                  </ul>
              </li></span>
              <span class="fragment"><li>Bytecode intrinsics (~40)
                  <ul>
                    <li>Late/always inlining candidates (e.g. <code>StringBuffer::*</code>, boxing/unboxing methods)</li>
                    <li>See: <code>Compile::should_delay_string_inlining()</code> in <code>doCall.cpp</code></li>
                    <li>See: <code>InlineTree::should_inline()</code> in <code>bytecodeInfo.cpp</code></li>
                  </ul>
              </li></span>
            </ul>

          </section>


          <section style="height: 100%;">
            <h2>Library Intrinsics</h2>

            <ul>
              <span class="fragment"><li>Interpreter:
                <ul>
                  <li>Implements only few intrinsics (notably <code>Math</code> and <code>CRC32</code>)</li>
                  <li>Generates special entry points (see: <code>AbstractInterpreter::MethodKind()</code>)</li>
                </ul>
              </li></span>
              <span class="fragment"><li>C1 (aka "client") JIT:
                <ul>
                  <li>Mostly <code>Unsafe</code> and <code>Math</code> intrinsics (see <code>Compiler::is_intrinsic_supported()</code>)</li>
                  <li>See: <code>GraphBuilder::build_graph_for_intrinsic()</code></li>
                </ul>
              </li></span>
              <span class="fragment"><li>C2 (aka "server") JIT:<ul>
                  <li>See <code>C2Compiler::is_intrinsic_supported()</code> for a complete list</li>
                  <li>See <code>LibraryCallKit::try_to_inline()</code> in <code>library_call.cpp</code></li>
                  <li>Create new "Intermediate Representation" (i.e. IR) nodes..<br/>
                    ..and match these nodes with corresponding "Machine Nodes" in <code>.ad</code> file</li>
                  <li>Use <code>IdealKit</code>/<code>GraphKit</code> to mimic the functionality directly in IR<br/>
                    (see <code>PhaseStringOpts</code> methods in <code>stringopts.hpp</code>)</li>
                </ul>
              </li></span>
            </ul>

          </section>


          <section style="height: 100%;">
            <h2>Controlling Intrinsics</h2>

            <ul>
              <li><code>-XX:+PrintCompilation -XX:+PrintInlining</code><br/>
                <pre class="big noshadow" data-trim="true">
                  <code class="cpp" text-trim="true">
<![CDATA[
613    1    b        io.simonis.Loop::compute (29 bytes)
                        @ 9   java.lang.Math::sin (5 bytes)   (intrinsic)    
                        @ 13   java.lang.Math::sqrt (5 bytes)   (intrinsic)
]]>
                  </code>
                </pre>
              </li>
              <li class="fragment"><code>-XX:+CheckIntrinsics</code> (together with <code>@HotSpotIntrinsicCandidate</code>)><br/>
                <pre class="big noshadow" data-trim="true">
                  <code class="cpp" text-trim="true">
<![CDATA[
Compiler intrinsic is defined for method [io.simonis.HelloWorld.sayHello()V],
but the method is not annotated with @HotSpotIntrinsicCandidate. Exiting.
]]>
                  </code>
                </pre>
              </li>
              <li class="fragment"><code>-XX:DisableIntrinsic={_dsqrt, ...}</code> (use id from <code>vmSymbols.hpp</code>)</li>
              <li class="fragment"><code>-XX:+PrintIntrinsics</code></li>
              <li class="fragment"><code>-XX:+Use{AES,CRC32,GHASH,MathExact,...}Intrinsics</code></li>
              <li class="fragment"><code>-XX:-InlineNatives</code>, <code>-XX:-Inline{Math, Class, Thread, ...}Natives</code><br/>
                <code>-XX:-Inline{UnsafeOps, ArrayCopy, ObjectHash}</code></li>
            </ul>

          </section>


          <section class="center">

            <h2>Native (JNI) vs. Intrinsic methods</h2>

            <br/>

            <ul>
              <li>JVM state (safepoints)</li>
              <li>Java vs. native calling conventions</li>
              <li>Platform dependent (native implementation required!)
                <ul>
                  <li>..for every platform!</li>
                </ul>
              </li>
              <li>OK for 'expensive' calls like I/O</li>
              <li style="margin-top: 3ex;">NOTICE: a native JNI call differs from a native VM "leaf call"!</li>
            </ul>

          </section>

        </section>


        <section style="height: 100%;">

          <section>

            <h2>Implementing an Interpreter Intrinsic</h2>

            <p style="text-align:left">Define in: <code>share/classfile/vmSymbols.hpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
do_class(     helloWorld,    "io/simonis/HelloWorld")                       \
 do_name(     sayHello_name, "sayHello")                                    \ 
 do_signature(sayHello_sign, "()V")                                         \
do_intrinsic(<span class="fragment highlight-border" data-fragment-index="1">_sayHello</span>,      helloWorld, sayHello_name, sayHello_sign, F_S) \
              </code>
            </pre>

            <p class="fragment" data-fragment-index="2" style="text-align:left">Define in: <code>share/interpreter/abstractInterpreter.hpp</code></p>

            <pre class="big noshadow fragment" data-fragment-index="2" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
class AbstractInterpreter: AllStatic {
  enum MethodKind {
    zerolocals,          // normal method (needs locals initialization)
    java_lang_math_sin,  // implementation of java.lang.Math.sin(x)
    ...
    <span class="fragment highlight-border" data-fragment-index="3">HelloWorld_sayHello</span>, // implementation of io.simonis.HelloWorld.sayHello()
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing an Interpreter Intrinsic</h2>

            <p style="text-align:left">Map in: <code>share/interpreter/abstractInterpreter.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
MethodKind AbstractInterpreter::method_kind(methodHandle m) {
  ...
  if (<span class="fragment highlight-current-border" data-fragment-index="1">GeekOut</span>) {
    if (<span class="fragment highlight-current-border" data-fragment-index="2">m-&gt;intrinsic_id() == vmIntrinsics::_sayHello</span>) {                       
      return <span class="fragment highlight-current-border" data-fragment-index="3">HelloWorld_sayHello</span>;
              </code>
            </pre>

            <p class="fragment" data-fragment-index="4" style="text-align:left">Generate in: <code>share/interpreter/templateInterpreterGenerator.cpp</code></p>

            <pre class="big noshadow fragment" data-fragment-index="4" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
address TemplateInterpreterGenerator::generate_method_entry(MethodKind kind) {
  switch (kind) {
  case Interpreter::<span class="fragment highlight-current-border" data-fragment-index="5">HelloWorld_sayHello</span>: entry_point = <span class="fragment highlight-current-border" data-fragment-index="5">generate_sayHello()</span>;
...
  return entry_point;
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing an Interpreter Intrinsic</h2>

            <p style="text-align:left">Implement in: <code>cpu/x86/templateInterpreterGenerator_x86_64.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
<span class="fragment highlight-current-border" data-fragment-index="2">#define __ _masm-&gt;</span>
address TemplateInterpreterGenerator::<span class="fragment highlight-current-border" data-fragment-index="1">generate_sayHello()</span> {
  // r13: sender sp
  // stack: [ ret adr ] &lt;-- rsp
  <span class="fragment highlight-current-border" data-fragment-index="3">address entry_point = __ pc()</span>;
  <span class="fragment highlight-current-border" data-fragment-index="4">const char *msg = "Hello GeekOut!\n"</span>;
  <span class="fragment highlight-current-border" data-fragment-index="5">__ mov64(c_rarg0, (long)msg)</span>;
  <span class="fragment highlight-current-border" data-fragment-index="6">__ mov64(c_rarg1, (long)stdout)</span>;
  <span class="fragment highlight-current-border" data-fragment-index="7">__ call</span>(RuntimeAddress(CAST_FROM_FN_PTR(address, <span class="fragment highlight-current-border" data-fragment-index="7">fputs</span>)));
  __ pop(rax);
  __ mov(rsp, r13);
  __ jmp(rax);
  <span class="fragment highlight-current-border" data-fragment-index="3">return entry_point</span>;
}<span class="fragment" data-fragment-index="8"></span>
              </code>
            </pre>

          </section>

          <section style="height: 100%;">

            <h2>Implementing an Interpreter Intrinsic</h2>

            <p style="text-align:left">Enable in: <code>share/oops/method.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
vmSymbols::SID <span class="fragment highlight-current-border" data-fragment-index="1">Method::klass_id_for_intrinsics</span>(const Klass* holder) {
  // if loader is not the boot loader (i.e., != NULL), we can't know the
  // intrinsics because we are not loading from core libraries
  const InstanceKlass* ik = InstanceKlass::cast(holder);
<span class="fragment" data-fragment-index="5"><mark class="border-no-bottom">  if (<span class="fragment highlight-current-border" data-fragment-index="6">GeekOut</span> &amp;&amp; <span class="fragment highlight-current-border" data-fragment-index="6">ik-&gt;name()-&gt;equals("io/simonis/HelloWorld")</span>) {  // &lt;----  </mark>
<mark class="border-no-bottom-top">    // check for io.simonis.HelloWorld                           // &lt;----  </mark>
<mark class="border-no-bottom-top">    <span class="fragment highlight-current-border" data-fragment-index="7">return vmSymbols::find_sid(ik-&gt;name()</span>);                      // &lt;----  </mark>
<mark class="border-no-top">  }                                                              // &lt;----  </mark></span>
  if (<span class="fragment highlight-current-border" data-fragment-index="2">(ik-&gt;class_loader() != NULL)</span>) { // NULL == boot class loader
    <span class="fragment highlight-current-border" data-fragment-index="3">return vmSymbols::NO_SID</span>;         // No intrinsics, regardless of name!
  }
  // see if the klass name is well-known:
  Symbol* klass_name = ik-&gt;name();
  <span class="fragment highlight-current-border" data-fragment-index="4">return vmSymbols::find_sid(klass_name)</span>;
}<span class="fragment" data-fragment-index="8"></span>
              </code>
            </pre>

          </section>


<!--

classFileParser.cpp

static void check_methods_for_intrinsics(const InstanceKlass* ik,
                                         const Array<Method*>* methods) {
  assert(ik != NULL, "invariant");
  assert(methods != NULL, "invariant");

  // Set up Method*::intrinsic_id as soon as we know the names of methods.
  // (We used to do this lazily, but now we query it in Rewriter,
  // which is eagerly done for every method, so we might as well do it now,
  // when everything is fresh in memory.)
  const vmSymbols::SID klass_id = Method::klass_id_for_intrinsics(ik);

  if (klass_id != vmSymbols::NO_SID) {
    for (int j = 0; j < methods->length(); ++j) {
      Method* method = methods->at(j);
      method->init_intrinsic_id();

method.cpp

void Method::link_method(const methodHandle& h_method, TRAPS) {
  // If the code cache is full, we may reenter this function for the
  // leftover methods that weren't linked.
  if (is_shared()) {
    address entry = Interpreter::entry_for_cds_method(h_method);
    assert(entry != NULL && entry == _i2i_entry,
           "should be correctly set during dump time");
    if (adapter() != NULL) {
      return;
    }
    assert(entry == _from_interpreted_entry,
           "should be correctly set during dump time");
  } else if (_i2i_entry != NULL) {
    return;
  }
  assert( _code == NULL, "nothing compiled yet" );

  // Setup interpreter entrypoint
  assert(this == h_method(), "wrong h_method()" );

  if (!is_shared()) {
    assert(adapter() == NULL, "init'd to NULL");
    address entry = Interpreter::entry_for_method(h_method);
    assert(entry != NULL, "interpreter entry must be non-null");
    // Sets both _i2i_entry and _from_interpreted_entry
    set_interpreter_entry(entry);
  }
-->
          <section>

            <h2>Interpreter Intrinsic Initialization</h2>

            <p style="text-align:left">At class loading: <code>share/classfile/classFileParser.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
void check_methods_for_intrinsics(InstanceKlass* ik, Array&lt;Method*&gt;* methods) {
  const vmSymbols::SID <span class="fragment highlight-current-border" data-fragment-index="1">klass_id = Method::klass_id_for_intrinsics(ik)</span>;

  if (<span class="fragment highlight-current-border" data-fragment-index="2">klass_id != vmSymbols::NO_SID</span>) {
    for (<span class="fragment highlight-current-border" data-fragment-index="3">int j = 0; j &lt; methods->length(); ++j</span>) {
      Method* method = methods->at(j);
      <span class="fragment highlight-current-border" data-fragment-index="4">method->init_intrinsic_id()</span>;
              </code>
            </pre>

            <p class="fragment" data-fragment-index="5" style="text-align:left">During class linking: <code>share/oops/method.cpp</code></p>

            <pre class="big noshadow fragment" data-fragment-index="5" data-trim="true">
              <code class="c++" data-trim="true" data-noescape="true">
void Method::link_method(const methodHandle&amp; h_method) {
  MethodKind <span class="fragment highlight-current-border" data-fragment-index="6">kind = AbstractInterpreter::method_kind(h_method)</span>;                
  address <span class="fragment highlight-current-border" data-fragment-index="7">entry = Interpreter::entry_for_kind(kind)</span>;
  <span class="fragment highlight-current-border" data-fragment-index="8">set_interpreter_entry(entry)</span>;
              </code>
            </pre>

          </section>

          <section class="center">
            <h1><code style="font-size: smaller;">-XX:+PrintInterpreter</code> Demo</h1>
          </section>

        </section>


        <section style="height: 100%;">

          <section>

            <h2>Implementing a C2-JIT Intrinsic</h2>

            <p style="text-align:center">Intrinsify: <b><em><code>java.util.Random.nextInt()</code></em></b> (by using Intel's <b><em><code>rdrand</code></em></b> instruction)</p>

            <pre class="big noshadow" data-trim="true">
              <code class="java" data-trim="true" data-noescape="true">
public class Random implements java.io.Serializable {
  ...
  <span class="fragment highlight-current-border" data-fragment-index="1">@HotSpotIntrinsicCandidate</span>                                                   
  public int nextInt() {
    return next(32);
  }
              </code>
            </pre>

            <p class="fragment" data-fragment-index="2" style="text-align:center">Define in: <code>share/classfile/vmSymbols.hpp</code></p>

            <pre class="big noshadow fragment" data-fragment-index="2" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
do_class(      java_util_Random, "java/util/Random")                          \
 do_name(      nextInt_name,     "nextInt")                                   \
 do_signature( ni_sign,          "()I")                                       \
do_intrinsic(  <span class="fragment highlight-current-border" data-fragment-index="3">_nextInt</span>,         java_util_Random, nextInt_name, ni_sign, F_R)\
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing a C2-JIT Intrinsic</h2>

            <p style="text-align:center">Detect <code>rdrand</code> instruction in: <code>cpu/x86/vm_version_x86.hpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
class VM_Version {
  static uint64_t feature_flags() {
    if (_cpuid_info.std_cpuid1_ecx.bits.rdrand != 0)
      result |= CPU_RDRAND;
    ...
  static bool <span class="fragment highlight-current-border" data-fragment-index="1">supports_rdrand()</span> { return (_features &amp; CPU_RDRAND) != 0; }
              </code>
            </pre>

            <p class="fragment" data-fragment-index="2" style="text-align:center">Implement <code>rdrand</code> in: <code>cpu/x86/assembler_x86.hpp</code></p>

            <pre class="big noshadow fragment" data-fragment-index="2" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
void <span class="fragment highlight-current-border" data-fragment-index="3">Assembler::rdrandl</span>(Register dst) {
  int encode = prefix_and_encode(dst->encoding());                       
  <span class="fragment highlight-current-border     border-no-bottom" data-fragment-index="4">emit_int8</span>(0x0F);
  <span class="fragment highlight-current-border border-no-bottom-top" data-fragment-index="4">emit_int8</span>((unsigned char)0xC7);
  <span class="fragment highlight-current-border        border-no-top" data-fragment-index="4">emit_int8</span>((unsigned char)(0xF0 | encode));
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing a C2-JIT Intrinsic</h2>

            <p style="text-align:center">Implement new IR-node in: <code>share/opto/intrinsicnode.hpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
class <span class="fragment highlight-current-border">RandINode</span> : public Node {
public:
  RandINode(Node *c) : Node(c) {}
  virtual int <span class="fragment highlight-current-border">Opcode()</span> const;
  const Type *bottom_type() const {
    return <span class="fragment highlight-current-border">TypeInt::INT</span>;
  }
  virtual uint ideal_reg() const {
    return <span class="fragment highlight-current-border">Op_RegI</span>;
  }<span class="fragment"></span>
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing a C2-JIT Intrinsic</h2>

            <p style="text-align:center">Implement corresponding MachineNode and match rule in: <code>cpu/x86/x86.ad</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
instruct <span class="fragment highlight-current-border">randI</span>(rRegI dst) %{          // generated randINode
  <span class="fragment highlight-current-border">match(Set dst (RandI))</span>;             // matches   RandINode
  format %{ <span class="fragment highlight-current-border">"RANDI    $dst  # int"</span> %}                             
  ins_encode %{
    <span class="fragment highlight-current-border">__ rdrandl($dst$$Register)</span>;
  %}
              </code>
            </pre>

            <pre class="big noshadow fragment" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
const bool <span class="fragment highlight-current-border">Matcher::match_rule_supported(int opcode)</span> {
  if (!has_match_rule(opcode)) return false;

  switch (opcode) {
  case Op_RandI: if (!<span class="fragment highlight-current-border">VM_Version::supports_rdrand()</span>) return false;
  ...
  return true;<span class="fragment"></span>
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing a C2-JIT Intrinsic</h2>

            <p style="text-align:center">Enable the intrinsic in the compiler: <code>share/opto/c2compiler.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
bool <span class="fragment highlight-current-border">C2Compiler::is_intrinsic_supported</span>(methodHandle method, bool is_virtual) {
  vmIntrinsics::ID <span class="fragment highlight-current-border">id = method-&gt;intrinsic_id()</span>;

  switch (id) {
  ...
  case <span class="fragment highlight-current-border">vmIntrinsics::_nextInt</span>:
    if (<span class="fragment highlight-current-border">Matcher::match_rule_supported(Op_RandI)</span>) return true;
    break;
  ...<span class="fragment"></span>
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing a C2-JIT Intrinsic</h2>

            <p style="text-align:center">Use it in: <code>share/opto/library_call.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
bool <span class="fragment highlight-current-border">LibraryCallKit::try_to_inline</span>(int predicate) {
  ...
  <span class="fragment highlight-current-border">switch (intrinsic_id())</span> {                                              
  case <span class="fragment highlight-current-border">vmIntrinsics::_nextInt</span>: return <span class="fragment highlight-current-border">inline_random(intrinsic_id()</span>);
              </code>
            </pre>

            <pre class="big noshadow fragment" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
bool <span class="fragment highlight-current-border">LibraryCallKit::inline_random</span>(vmIntrinsics::ID id) {
  Node* n = NULL;
  switch (id) {
  case <span class="fragment highlight-current-border">vmIntrinsics::_nextInt</span>:
    if (!Matcher::match_rule_supported(Op_RandI)) return false;          
    n = <span class="fragment highlight-current-border">new RandINode(control())</span>;
  ...
  <span class="fragment highlight-current-border">set_result(_gvn.transform(n))</span>;
              </code>
            </pre>
          </section>

          <section>
<table class="calling_hirarchy" style="font-size: 70%;">
  <tr>
    <td colspan="16" class="functionCall  indent_level_0">
      <span class="fragment highlight-current-border"><code style="white-space: pre-wrap;">CompileBroker::compiler_thread_loop()                                   </code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="15">&nbsp;</td>
    <td colspan="15" class="functionCall  indent_level_1">
    <span class="fragment highlight-current-border"><code>CompileBroker::invoke_compiler_on_method(task=0x7ffff01da940)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="14">&nbsp;</td>
    <td colspan="14" class="functionCall  indent_level_2">
    <span class="fragment highlight-current-border"><code>C2Compiler::compile_method(target=0x7fffc4299130)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="13">&nbsp;</td>
    <td colspan="13" class="functionCall  indent_level_3">
    <span class="fragment highlight-current-border"><code>Compile::Compile(compiler=0x7ffff01a0a60, target=0x7fffc4299130)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="12">&nbsp;</td>
    <td colspan="12" class="functionCall  indent_level_4">
    <span class="fragment highlight-current-border"><code>ParseGenerator::generate()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="11">&nbsp;</td>
    <td colspan="11" class="functionCall  indent_level_5">
    <span class="fragment highlight-current-border"><code>Parse::Parse(caller=0x7fffc440de00, method=0x7fffc4299130)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="10">&nbsp;</td>
    <td colspan="10" class="functionCall  indent_level_6">
    <span class="fragment highlight-current-border"><code>Parse::do_all_blocks()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="9">&nbsp;</td>
    <td colspan="9" class="functionCall  indent_level_7">
    <span class="fragment highlight-current-border"><code>Parse::do_one_block()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="8">&nbsp;</td>
    <td colspan="8" class="functionCall  indent_level_8">
    <span class="fragment highlight-current-border"><code>Parse::do_one_bytecode()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="7">&nbsp;</td>
    <td colspan="7" class="functionCall  indent_level_9">
    <span class="fragment highlight-current-border"><code>Parse::do_call()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="6">&nbsp;</td>
    <td colspan="6" class="functionCall  indent_level_10">
    <span class="fragment highlight-current-border"><code>Compile::call_generator(ciMethod*, ...)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="5">&nbsp;</td>
    <td colspan="5" class="functionCall  indent_level_11">
    <span class="fragment highlight-current-border"><code>Compile::find_intrinsic(ciMethod*, ...)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="4">&nbsp;</td>
    <td colspan="4" class="functionCall  indent_level_12">
    <span class="fragment highlight-current-border"><code>Compile::make_vm_intrinsic(ciMethod*, ...)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="3">&nbsp;</td>
    <td colspan="3" class="functionCall  indent_level_13">
    <span class="fragment highlight-current-border"><code>C2Compiler::is_intrinsic_supported(methodHandle)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="2">&nbsp;</td>
    <td colspan="2" class="functionCall  indent_level_14">
    <span class="fragment highlight-current-border"><code>Matcher::match_rule_supported(Op_RandI)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="1">&nbsp;</td>
    <td colspan="1" class="functionCall  indent_level_15">
    <span class="fragment highlight-current-border"><code>VM_Version::supports_rdrand ()</code></span>
    </td>
  </tr>
</table>
          </section>

          <section>
<table class="calling_hirarchy" style="font-size: 70%;">
  <tr>
    <td colspan="14" class="functionCall  indent_level_0">
      <code style="white-space: pre-wrap;">CompileBroker::compiler_thread_loop()                                   </code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="16">&nbsp;</td>
    <td colspan="13" class="functionCall  indent_level_1">
    <code>CompileBroker::invoke_compiler_on_method(task=0x7ffff01da940)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="15">&nbsp;</td>
    <td colspan="12" class="functionCall  indent_level_2">
    <code>C2Compiler::compile_method(target=0x7fffc4299130)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="14">&nbsp;</td>
    <td colspan="11" class="functionCall  indent_level_3">
    <code>Compile::Compile(compiler=0x7ffff01a0a60, target=0x7fffc4299130)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="13">&nbsp;</td>
    <td colspan="10" class="functionCall  indent_level_4">
    <code>ParseGenerator::generate()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="12">&nbsp;</td>
    <td colspan="9" class="functionCall  indent_level_5">
    <code>Parse::Parse(caller=0x7fffc440de00, method=0x7fffc4299130)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="11">&nbsp;</td>
    <td colspan="8" class="functionCall  indent_level_6">
    <code>Parse::do_all_blocks()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="10">&nbsp;</td>
    <td colspan="7" class="functionCall  indent_level_7">
    <code>Parse::do_one_block()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="9">&nbsp;</td>
    <td colspan="6" class="functionCall  indent_level_8">
    <code>Parse::do_one_bytecode()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="8">&nbsp;</td>
    <td colspan="5" class="functionCall  indent_level_9">
    <code>Parse::do_call()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="7">&nbsp;</td>
    <td colspan="4" class="functionCall  indent_level_10">
    <mark><code>Compile::call_generator(ciMethod*, ...)</code></mark>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="1">&nbsp;</td>
    <td colspan="3" class="functionCall  indent_level_11">
      <code>...</code>
    </td>
  </tr>
  <tr>
    <td colspan="4" class="functionCall  indent_level_10">
      <span class="fragment highlight-current-border"><code>LibraryIntrinsic::generate()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="4">&nbsp;</td>
    <td colspan="3" class="functionCall  indent_level_11">
    <span class="fragment highlight-current-border"><code>LibraryCallKit::try_to_inline(vmIntrinsics::_nextInt)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="3">&nbsp;</td>
    <td colspan="2" class="functionCall  indent_level_12">
    <span class="fragment highlight-current-border"><code>LibraryCallKit::inline_random()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="2">&nbsp;</td>
    <td colspan="1" class="functionCall  indent_level_13">
    <span class="fragment highlight-current-border"><code>n = new RandINode(control())</code></span>
    </td>
  </tr>
  <tr>
    <td colspan="1" class="functionCall  indent_level_13">
      <span class="fragment highlight-current-border"><code>LibraryCallKit::set_result(n)</code></span>
    </td>
  </tr>
</table>
          </section>

          <section>
<table class="calling_hirarchy" style="font-size: 70%;">
  <tr>
    <td colspan="11" class="functionCall  indent_level_0">
      <code style="white-space: pre-wrap;">CompileBroker::compiler_thread_loop()                                   </code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="16">&nbsp;</td>
    <td colspan="10" class="functionCall  indent_level_1">
    <code>CompileBroker::invoke_compiler_on_method(task=0x7ffff01da940)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="15">&nbsp;</td>
    <td colspan="9" class="functionCall  indent_level_2">
    <code>C2Compiler::compile_method(target=0x7fffc4299130)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="14">&nbsp;</td>
    <td colspan="8" class="functionCall  indent_level_3">
    <code>Compile::Compile(compiler=0x7ffff01a0a60, target=0x7fffc4299130)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="13">&nbsp;</td>
    <td colspan="7" class="functionCall  indent_level_4">
    <mark><code>ParseGenerator::generate()</code></mark>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="1">&nbsp;</td>
    <td colspan="6" class="functionCall  indent_level_5">
      <code>...</code>
    </td>
  </tr>
  <tr>
    <td colspan="7" class="functionCall  indent_level_4">
      <span class="fragment highlight-current-border"><code>Compile::Code_Gen()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="10">&nbsp;</td>
    <td colspan="6" class="functionCall  indent_level_5">
    <span class="fragment highlight-current-border"><code>Matcher::match()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="5">&nbsp;</td>
    <td colspan="5" class="functionCall  indent_level_6">
      <span class="fragment highlight-current-border"><code>Matcher::xform(RandINode n)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="4">&nbsp;</td>
    <td colspan="4" class="functionCall  indent_level_7">
      <span class="fragment highlight-current-border"><code>Matcher::match_tree(RandINode n)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="3">&nbsp;</td>
    <td colspan="3" class="functionCall  indent_level_8">
      <span class="fragment highlight-current-border"><code>Matcher::ReduceInst(MachOpcodes randI_rule)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="2">&nbsp;</td>
    <td colspan="2" class="functionCall  indent_level_9">
      <span class="fragment highlight-current-border"><code>State::MachNodeGenerator(MachOpcodes randI_rule)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="1">&nbsp;</td>
    <td colspan="1" class="functionCall  indent_level_10">
      <span class="fragment highlight-current-border"><code>return new randINode()</code></span>
    </td>
  </tr>
  <tr>
    <td colspan="6" class="functionCall  indent_level_5">
      <span class="fragment highlight-current-border"><code>Compile::Output()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="3">&nbsp;</td>
    <td colspan="5" class="functionCall  indent_level_6">
    <span class="fragment highlight-current-border"><code>Compile::fill_buffer(CodeBuffer)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="2">&nbsp;</td>
    <td colspan="4" class="functionCall  indent_level_7">
    <span class="fragment highlight-current-border"><code>randINode::emit(CodeBuffer)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="1">&nbsp;</td>
    <td colspan="3" class="functionCall  indent_level_8">
    <span class="fragment highlight-current-border"><code>Assembler::rdrandl()</code></span>
    </td>
  </tr>
</table>
          </section>

          <section>
            <h2><code style="text-transform: none;">Random.nextInt()</code> - DEMO</h2>

            <pre class="big noshadow" data-trim="true">
              <code class="java" data-trim="true" data-noescape="true">
public class Random {

  static final <span class="fragment highlight-current-border">java.util.Random sr = new SecureRandom()</span>;

  static int foo() {
    return <span class="fragment highlight-current-border">sr.nextInt()</span>;
  }
  public static void main(String[] args) throws Exception {
    int count = Integer.parseInt(args.length > 0 ? args[0] : "10");
    int result = 0;
    for (int i = 0; i &lt; count; i++) {
      <span class="fragment highlight-current-border">result += foo()</span>;
    }
    System.out.println(result);
  }
}
              </code>
            </pre>
          </section>

          <section>
            <h2><code style="text-transform: none;">Random.nextInt()</code> - DEMO</h2>

            <pre class="big noshadow" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$ time java io.simonis.Random 1000000
<span class="fragment">-886841403

real	0m2.228s
user	0m2.144s
sys	0m0.088s</span>

<span class="fragment">$ time java <span class="fragment highlight-current-border">-XX:DisableIntrinsic=_nextInt</span> io.simonis.Random 1000000</span>
<span class="fragment">695536079

real	0m3.187s
user	0m2.708s
sys	0m0.472s</span>
              </code>
            </pre>
          </section>

          <section>
            <pre class="big noshadow" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$ java -XX:+PrintCompilation -XX:+PrintInlining io.simonis.Random 10000
<span class="fragment">...
 io.simonis.Random::foo (7 bytes)
   @ 3   java.util.Random::nextInt (7 bytes)   <span class="fragment highlight-current-border">(intrinsic)</span></span>

<span class="fragment">$ java -XX:+PrintCompilation -XX:+PrintInlining \
                  <span class="fragment highlight-current-border">-XX:DisableIntrinsic=_nextInt</span> io.simonis.Random 10000</span>
<span class="fragment">...
 io.simonis.Random::foo (7 bytes)
   @ 3 java.util.Random::nextInt (7 bytes) inline (hot)
     @ 3 java.security.SecureRandom::next (61 bytes) <span class="fragment highlight-current-border">inline (hot)</span>
       @ 17 java.security.SecureRandom::nextBytes (9 bytes) <span class="fragment highlight-current-border">inline (hot)</span>
         @ 5 java.security.SecureRandomSpi::engineNextBytes <span class="fragment highlight-current-border">(0 bytes) virtual call</span>
...
 sun.security.provider.<span class="fragment highlight-current-border">NativePRNG::engineNextBytes</span> (8 bytes)
   @ 4 sun.security.provider.NativePRNG$RandomIO::access$400 (6 bytes) inline (hot)
     @ 2 sun.security.provider.NativePRNG$RandomIO::implNextBytes (162 bytes) already compiled into a big method</span>
              </code>
            </pre>
          </section>

          <section>
            <pre class="big noshadow" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$ java <span class="fragment highlight-current-border">-XX:CompileCommand</span>="<span class="fragment highlight-current-border">option io.simonis.Random::foo PrintOptoAssembly</span>" \
                                                        io.simonis.Random 10000
<span class="fragment">000   B1: #     N1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
000     # stack bang (96 bytes)
        pushq   rbp             # Save rbp
        subq    rsp, #16        # Create frame

00c     <span class="fragment highlight-border">RANDI    RAX</span>            # int</span>

<span class="fragment">$ java -XX:CompileCommand="<span class="fragment highlight-current-border">option io.simonis.Random::foo PrintAssembly</span>" \
                                                        io.simonis.Random 10000</span>
<span class="fragment"> ;; B1: #       N1 &lt;- BLOCK HEAD IS JUNK   Freq: 1
8c0: mov    %eax,-0x16000(%rsp)
8c7: push   %rbp
8c8: sub    $0x10,%rsp         ;*synchronization entry
                               ; - io.simonis.Random::foo@-1 (line 10)
8cc: <span class="fragment highlight-border">rdrand %eax</span>               ;*invokevirtual nextInt {reexecute=0 rethrow=0..
                               ; - io.simonis.Random::foo@3 (line 10)</span>
              </code>
            </pre>
          </section>

        </section>

<!--


#0  randINode::randINode (this=0x7fff9c0f6e00) at ad_x86.hpp:50136
#1  0x00007ffff56ed440 in State::MachNodeGenerator (this=0x7fffa8042b10, opcode=1691) at ad_x86_gen.cpp:7161
#2  0x00007ffff6119acf in Matcher::ReduceInst (this=0x7fffc64c3e70, s=0x7fffa8042b10, rule=1691, mem=@0x7fffc64c2e50: 0x1) at /share/OpenJDK/jdk/src/hotspot/share/opto/matcher.cpp:1647
#3  0x00007ffff6118f67 in Matcher::match_tree (this=0x7fffc64c3e70, n=0x7fff9c0e34c0) at /share/OpenJDK/jdk/src/hotspot/share/opto/matcher.cpp:1396
#4  0x00007ffff61171cf in Matcher::xform (this=0x7fffc64c3e70, n=0x7fff9c0e34c0, max_stack=11) at /share/OpenJDK/jdk/src/hotspot/share/opto/matcher.cpp:999
#5  0x00007ffff6112cb2 in Matcher::match (this=0x7fffc64c3e70) at /share/OpenJDK/jdk/src/hotspot/share/opto/matcher.cpp:341
#6  0x00007ffff5a5efb4 in Compile::Code_Gen (this=0x7fffc64c5ae0) at /share/OpenJDK/jdk/src/hotspot/share/opto/compile.cpp:2413
#7  0x00007ffff5a577da in Compile::Compile (this=0x7fffc64c5ae0, ci_env=0x7fffc64c6880, compiler=0x7ffff0266c50, target=0x7fff9c030550, osr_bci=-1, subsume_loads=true, do_escape_analysis=true, eliminate_boxing=true, 
    directive=0x7fffa803aa90) at /share/OpenJDK/jdk/src/hotspot/share/opto/compile.cpp:908
#8  0x00007ffff5905b95 in C2Compiler::compile_method (this=0x7ffff0266c50, env=0x7fffc64c6880, target=0x7fff9c030550, entry_bci=-1, directive=0x7fffa803aa90) at /share/OpenJDK/jdk/src/hotspot/share/opto/c2compiler.cpp:109
#9  0x00007ffff5a74733 in CompileBroker::invoke_compiler_on_method (task=0x7ffff028c600) at /share/OpenJDK/jdk/src/hotspot/share/compiler/compileBroker.cpp:2102
#10 0x00007ffff5a73512 in CompileBroker::compiler_thread_loop () at /share/OpenJDK/jdk/src/hotspot/share/compiler/compileBroker.cpp:1802

#0  VM_Version::supports_rdrand () at /share/OpenJDK/jdk/src/hotspot/cpu/x86/vm_version_x86.hpp:804
#1  0x00007ffff57a623b in Assembler::rdrandl (this=0x7fffc64c2b20, dst=0x0) at /share/OpenJDK/jdk/src/hotspot/cpu/x86/assembler_x86.cpp:3936
#2  0x00007ffff55cae91 in randINode::emit (this=0x7fff9c0f6e00, cbuf=..., ra_=0x7fffc64c32b0) at /share/OpenJDK/jdk/src/hotspot/cpu/x86/x86.ad:10504
#3  0x00007ffff5a562de in Compile::scratch_emit_size (this=0x7fffc64c5ae0, n=0x7fff9c0f6e00) at /share/OpenJDK/jdk/src/hotspot/share/opto/compile.cpp:609
#4  0x00007ffff6075f50 in MachNode::emit_size (this=0x7fff9c0f6e00, ra_=0x7fffc64c32b0) at /share/OpenJDK/jdk/src/hotspot/share/opto/machnode.cpp:155
#5  0x00007ffff6075ebb in MachNode::size (this=0x7fff9c0f6e00, ra_=0x7fffc64c32b0) at /share/OpenJDK/jdk/src/hotspot/share/opto/machnode.cpp:147
#6  0x00007ffff6221035 in Compile::shorten_branches (this=0x7fffc64c5ae0, blk_starts=0x7fff9c0d3750, code_size=@0x7fffc64c2fd4: 0, reloc_size=@0x7fffc64c2fd8: 1, stub_size=@0x7fffc64c2fdc: 0)
    at /share/OpenJDK/jdk/src/hotspot/share/opto/output.cpp:332
#7  0x00007ffff62240c8 in Compile::init_buffer (this=0x7fffc64c5ae0, blk_starts=0x7fff9c0d3750) at /share/OpenJDK/jdk/src/hotspot/share/opto/output.cpp:1028
#8  0x00007ffff62205de in Compile::Output (this=0x7fffc64c5ae0) at /share/OpenJDK/jdk/src/hotspot/share/opto/output.cpp:121
#9  0x00007ffff5a5f3c6 in Compile::Code_Gen (this=0x7fffc64c5ae0) at /share/OpenJDK/jdk/src/hotspot/share/opto/compile.cpp:2488
#10 0x00007ffff5a577da in Compile::Compile (this=0x7fffc64c5ae0, ci_env=0x7fffc64c6880, compiler=0x7ffff0266c50, target=0x7fff9c030550, osr_bci=-1, subsume_loads=true, do_escape_analysis=true, eliminate_boxing=true, 
    directive=0x7fffa803aa90) at /share/OpenJDK/jdk/src/hotspot/share/opto/compile.cpp:908
#11 0x00007ffff5905b95 in C2Compiler::compile_method (this=0x7ffff0266c50, env=0x7fffc64c6880, target=0x7fff9c030550, entry_bci=-1, directive=0x7fffa803aa90) at /share/OpenJDK/jdk/src/hotspot/share/opto/c2compiler.cpp:109
#12 0x00007ffff5a74733 in CompileBroker::invoke_compiler_on_method (task=0x7ffff028c600) at /share/OpenJDK/jdk/src/hotspot/share/compiler/compileBroker.cpp:2102
#13 0x00007ffff5a73512 in CompileBroker::compiler_thread_loop () at /share/OpenJDK/jdk/src/hotspot/share/compiler/compileBroker.cpp:1802


#0  VM_Version::supports_rdrand () at /share/OpenJDK/jdk/src/hotspot/cpu/x86/vm_version_x86.hpp:804
#1  0x00007ffff57a623b in Assembler::rdrandl (this=0x7fffc64c2d70, dst=0x0) at /share/OpenJDK/jdk/src/hotspot/cpu/x86/assembler_x86.cpp:3936
#2  0x00007ffff55cae91 in randINode::emit (this=0x7fff9c0f6e00, cbuf=..., ra_=0x7fffc64c32b0) at /share/OpenJDK/jdk/src/hotspot/cpu/x86/x86.ad:10504
#3  0x00007ffff6225880 in Compile::fill_buffer (this=0x7fffc64c5ae0, cb=0x7fffc64c6438, blk_starts=0x7fff9c0d3750) at /share/OpenJDK/jdk/src/hotspot/share/opto/output.cpp:1391
#4  0x00007ffff62207d1 in Compile::Output (this=0x7fffc64c5ae0) at /share/OpenJDK/jdk/src/hotspot/share/opto/output.cpp:155
#5  0x00007ffff5a5f3c6 in Compile::Code_Gen (this=0x7fffc64c5ae0) at /share/OpenJDK/jdk/src/hotspot/share/opto/compile.cpp:2488
#6  0x00007ffff5a577da in Compile::Compile (this=0x7fffc64c5ae0, ci_env=0x7fffc64c6880, compiler=0x7ffff0266c50, target=0x7fff9c030550, osr_bci=-1, subsume_loads=true, do_escape_analysis=true, eliminate_boxing=true, 
    directive=0x7fffa803aa90) at /share/OpenJDK/jdk/src/hotspot/share/opto/compile.cpp:908
#7  0x00007ffff5905b95 in C2Compiler::compile_method (this=0x7ffff0266c50, env=0x7fffc64c6880, target=0x7fff9c030550, entry_bci=-1, directive=0x7fffa803aa90) at /share/OpenJDK/jdk/src/hotspot/share/opto/c2compiler.cpp:109
#8  0x00007ffff5a74733 in CompileBroker::invoke_compiler_on_method (task=0x7ffff028c600) at /share/OpenJDK/jdk/src/hotspot/share/compiler/compileBroker.cpp:2102
#9  0x00007ffff5a73512 in CompileBroker::compiler_thread_loop () at /share/OpenJDK/jdk/src/hotspot/share/compiler/compileBroker.cpp:1802

#0  VM_Version::supports_rdrand () at /share/OpenJDK/jdk/src/hotspot/cpu/x86/vm_version_x86.hpp:804
#1  0x00007ffff5829d2c in Compiler::is_intrinsic_supported (this=0x7ffff0266bb0, method=...) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compiler.cpp:141
#2  0x00007ffff582a242 in AbstractCompiler::is_intrinsic_available (this=0x7ffff0266bb0, method=..., directive=0x7fff9c1d9750) at /share/OpenJDK/jdk/src/hotspot/share/compiler/abstractCompiler.hpp:134
#3  0x00007ffff583fd45 in GraphBuilder::try_inline_intrinsics (this=0x7fffc63c5000, callee=0x7fff9c128e40, ignore_return=false) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_GraphBuilder.cpp:3582
#4  0x00007ffff583f136 in GraphBuilder::try_inline (this=0x7fffc63c5000, callee=0x7fff9c128e40, holder_known=true, ignore_return=false, bc=Bytecodes::_invokespecial, receiver=0x0)
    at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_GraphBuilder.cpp:3415
#5  0x00007ffff5837f66 in GraphBuilder::invoke (this=0x7fffc63c5000, code=Bytecodes::_invokespecial) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_GraphBuilder.cpp:2025
#6  0x00007ffff583ce0c in GraphBuilder::iterate_bytecodes_for_block (this=0x7fffc63c5000, bci=0) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_GraphBuilder.cpp:2870
#7  0x00007ffff583ab58 in GraphBuilder::connect_to_end (this=0x7fffc63c5000, beg=0x7fff9c11a570) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_GraphBuilder.cpp:2627
#8  0x00007ffff583d76a in GraphBuilder::iterate_all_blocks (this=0x7fffc63c5000, start_in_current_block_for_inlining=false) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_GraphBuilder.cpp:2953
#9  0x00007ffff583ec66 in GraphBuilder::GraphBuilder (this=0x7fffc63c5000, compilation=0x7fffc63c54c0, scope=0x7fff9c11a170) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_GraphBuilder.cpp:3316
#10 0x00007ffff584f358 in IRScope::build_graph (this=0x7fff9c11a170, compilation=0x7fffc63c54c0, osr_bci=-1) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_IR.cpp:127
#11 0x00007ffff584f5b4 in IRScope::IRScope (this=0x7fff9c11a170, compilation=0x7fffc63c54c0, caller=0x0, caller_bci=-1, method=0x7fff9c127410, osr_bci=-1, create_graph=true)
    at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_IR.cpp:158
#12 0x00007ffff584fbdc in IR::IR (this=0x7fff9c11a140, compilation=0x7fffc63c54c0, method=0x7fff9c127410, osr_bci=-1) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_IR.cpp:269
#13 0x00007ffff5824b11 in Compilation::build_hir (this=0x7fffc63c54c0) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compilation.cpp:154
#14 0x00007ffff58258c2 in Compilation::compile_java_method (this=0x7fffc63c54c0) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compilation.cpp:387
#15 0x00007ffff5825d53 in Compilation::compile_method (this=0x7fffc63c54c0) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compilation.cpp:460
#16 0x00007ffff582659d in Compilation::Compilation (this=0x7fffc63c54c0, compiler=0x7ffff0266bb0, env=0x7fffc63c5980, method=0x7fff9c127410, osr_bci=-1, buffer_blob=0x7fffd8991610, directive=0x7fff9c1d9750)
    at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compilation.cpp:584
#17 0x00007ffff5829e33 in Compiler::compile_method (this=0x7ffff0266bb0, env=0x7fffc63c5980, method=0x7fff9c127410, entry_bci=-1, directive=0x7fff9c1d9750) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compiler.cpp:254
#18 0x00007ffff5a74733 in CompileBroker::invoke_compiler_on_method (task=0x7ffff028c600) at /share/OpenJDK/jdk/src/hotspot/share/compiler/compileBroker.cpp:2102
#19 0x00007ffff5a73512 in CompileBroker::compiler_thread_loop () at /share/OpenJDK/jdk/src/hotspot/share/compiler/compileBroker.cpp:1802




#0  LIR_Op0::LIR_Op0 (this=0x7fff9c1479a0, code=lir_next_int, result=0x8fd00b, info=0x0) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_LIR.hpp:1318
#1  0x00007ffff58a2722 in LIR_List::next_int (this=0x7fff9c15d680, result=0x8fd00b) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_LIR.hpp:2075
#2  0x00007ffff589cdd1 in LIRGenerator::do_Intrinsic (this=0x7fffc63c4ea0, x=0x7fff9c15b8d0) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_LIRGenerator.cpp:3053
#3  0x00007ffff58488c8 in Intrinsic::visit (this=0x7fff9c15b8d0, v=0x7fffc63c4ea0) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Instruction.hpp:1532
#4  0x00007ffff588f3ae in LIRGenerator::do_root (this=0x7fffc63c4ea0, instr=0x7fff9c15b8d0) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_LIRGenerator.cpp:377
#5  0x00007ffff588f238 in LIRGenerator::block_do (this=0x7fffc63c4ea0, block=0x7fff9c15ae60) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_LIRGenerator.cpp:358
#6  0x00007ffff585aeeb in BlockList::iterate_forward (this=0x7fff9c15c770, closure=0x7fffc63c4ea8) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Instruction.cpp:914
#7  0x00007ffff5853bfd in IR::iterate_linear_scan_order (this=0x7fff9c15aa30, closure=0x7fffc63c4ea8) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_IR.cpp:1210
#8  0x00007ffff5825141 in Compilation::emit_lir (this=0x7fffc63c5340) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compilation.cpp:259
#9  0x00007ffff58259a4 in Compilation::compile_java_method (this=0x7fffc63c5340) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compilation.cpp:398
#10 0x00007ffff5825d53 in Compilation::compile_method (this=0x7fffc63c5340) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compilation.cpp:460
#11 0x00007ffff582659d in Compilation::Compilation (this=0x7fffc63c5340, compiler=0x7ffff0266bb0, env=0x7fffc63c5800, method=0x7fff9c0c69a0, osr_bci=-1, buffer_blob=0x7fffd8997590, directive=0x7fff9c1c0e10)
    at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compilation.cpp:584
#12 0x00007ffff5829e33 in Compiler::compile_method (this=0x7ffff0266bb0, env=0x7fffc63c5800, method=0x7fff9c0c69a0, entry_bci=-1, directive=0x7fff9c1c0e10) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compiler.cpp:254
#13 0x00007ffff5a74733 in CompileBroker::invoke_compiler_on_method (task=0x7ffff028c600) at /share/OpenJDK/jdk/src/hotspot/share/compiler/compileBroker.cpp:2102
#14 0x00007ffff5a73512 in CompileBroker::compiler_thread_loop () at /share/OpenJDK/jdk/src/hotspot/share/compiler/compileBroker.cpp:1802

#0  Assembler::rdrandl (this=0x7fff9c165fd0, dst=0x0) at /share/OpenJDK/jdk/src/hotspot/cpu/x86/assembler_x86.cpp:3936
#1  0x00007ffff588afd1 in LIR_Assembler::next_int (this=0x7fffc63c5170, result_reg=0xc00b) at /share/OpenJDK/jdk/src/hotspot/cpu/x86/c1_LIRAssembler_x86.cpp:3962
#2  0x00007ffff5870870 in LIR_Assembler::emit_op0 (this=0x7fffc63c5170, op=0x7fff9c160260) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_LIRAssembler.cpp:688
#3  0x00007ffff5866b69 in LIR_Op0::emit_code (this=0x7fff9c160260, masm=0x7fffc63c5170) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_LIR.cpp:1002
#4  0x00007ffff586f567 in LIR_Assembler::emit_lir_list (this=0x7fffc63c5170, list=0x7fff9c11cd90) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_LIRAssembler.cpp:292
#5  0x00007ffff586f30b in LIR_Assembler::emit_block (this=0x7fffc63c5170, block=0x7fff9c11a570) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_LIRAssembler.cpp:257
#6  0x00007ffff586f063 in LIR_Assembler::emit_code (this=0x7fffc63c5170, hir=0x7fff9c11be80) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_LIRAssembler.cpp:216
#7  0x00007ffff582569b in Compilation::emit_code_body (this=0x7fffc63c54c0) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compilation.cpp:352
#8  0x00007ffff58259ea in Compilation::compile_java_method (this=0x7fffc63c54c0) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compilation.cpp:404
#9  0x00007ffff5825d53 in Compilation::compile_method (this=0x7fffc63c54c0) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compilation.cpp:460
#10 0x00007ffff582659d in Compilation::Compilation (this=0x7fffc63c54c0, compiler=0x7ffff0266bb0, env=0x7fffc63c5980, method=0x7fff9c127410, osr_bci=-1, buffer_blob=0x7fffd8991610, directive=0x7fff9c1d9750)
    at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compilation.cpp:584
#11 0x00007ffff5829e33 in Compiler::compile_method (this=0x7ffff0266bb0, env=0x7fffc63c5980, method=0x7fff9c127410, entry_bci=-1, directive=0x7fff9c1d9750) at /share/OpenJDK/jdk/src/hotspot/share/c1/c1_Compiler.cpp:254
#12 0x00007ffff5a74733 in CompileBroker::invoke_compiler_on_method (task=0x7ffff028c600) at /share/OpenJDK/jdk/src/hotspot/share/compiler/compileBroker.cpp:2102
#13 0x00007ffff5a73512 in CompileBroker::compiler_thread_loop () at /share/OpenJDK/jdk/src/hotspot/share/compiler/compileBroker.cpp:1802

-->

        <section style="height: 100%;">

          <section>

            <h2>Implementing a C1-JIT Intrinsic</h2>

            <p style="text-align:center">Define code for LIR operation : <code>share/c1/c1_LIR.hpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
enum LIR_Code {
    begin_op0
      , ...
      , <span class="fragment highlight-current-border" data-fragment-index="1">lir_next_int</span>                                                          
  , end_op0
  , begin_op1
              </code>
            </pre>

            <p class="fragment" data-fragment-index="2" style="text-align:center">Define LIR instruction: <code>share/c1/c1_LIR.hpp</code></p>

            <pre class="big noshadow fragment" data-fragment-index="2" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
class LIR_List: public CompilationResourceObj {
  ...
  void <span class="fragment highlight-current-border" data-fragment-index="3">next_int(LIR_Opr result)</span> { append(<span class="fragment highlight-current-border" data-fragment-index="4">new LIR_Op0(<span class="fragment highlight-current-border" data-fragment-index="5">lir_next_int</span>, result)</span>); }
  ...
};<span class="fragment" data-fragment-index="6"></span>
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing a C1-JIT Intrinsic</h2>

            <p style="text-align:center">Define generic LIR assembler operation: <code>share/c1/c1_LIRAssembler.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
void <span class="fragment highlight-current-border" data-fragment-index="1">LIR_Assembler::emit_op0</span>(LIR_Op0* op) {
  switch (op->code()) {
    ...
    case <span class="fragment highlight-current-border" data-fragment-index="2">lir_next_int</span>:
      <span class="fragment highlight-current-border" data-fragment-index="3">next_int</span>(op->result_opr());                  
              </code>
            </pre>

            <p class="fragment" data-fragment-index="4" style="text-align:center">And implement it for x86: <code>cpu/x86/c1_LIRAssembler_x86.cpp</code></p>

            <pre class="big noshadow fragment" data-fragment-index="4" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
void <span class="fragment highlight-current-border" data-fragment-index="5">LIR_Assembler::next_int</span>(LIR_Opr result_reg) {
  __ <span class="fragment highlight-current-border" data-fragment-index="6">rdrandl</span>(result_reg->as_register());
}<span class="fragment" data-fragment-index="7"></span>
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing a C1-JIT Intrinsic</h2>

            <p style="text-align:center">Enable intrinisic in C1 Compiler: <code>share/c1/c1_Compiler.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
bool <span class="fragment highlight-current-border" data-fragment-index="1">Compiler::is_intrinsic_supported</span>(methodHandle method) {
  switch (method->intrinsic_id()) {
  ...
  case <span class="fragment highlight-current-border" data-fragment-index="2">vmIntrinsics::_nextInt</span>:
    if (<span class="fragment highlight-current-border" data-fragment-index="3">VM_Version::supports_rdrand()</span>) return true;
              </code>
            </pre>

            <p class="fragment" data-fragment-index="4" style="text-align:center">And generate the intrinsic: <code>share/c1/c1_LIRGenerator.cpp</code></p>

            <pre class="big noshadow fragment" data-fragment-index="4" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
void <span class="fragment highlight-current-border" data-fragment-index="5">LIRGenerator::do_Intrinsic</span>(Intrinsic* x) {
  switch (x->id()) {
  case <span class="fragment highlight-current-border" data-fragment-index="6">vmIntrinsics::_nextInt</span>:
    LIRGenerator* lir_gen = gen();
    LIR_List*     lir_list = lir_gen->lir();                
    <span class="fragment highlight-current-border" data-fragment-index="7">lir_list->next_int</span>(rlock_result(x));<span class="fragment" data-fragment-index="8"></span>
              </code>
            </pre>

          </section>

          <section>

            <h2>Implementing a C1-JIT Intrinsic</h2>

            <p style="text-align:center">Handle the intrinsic in the visitor: <code>share/c1/c1_LIR.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" data-trim="true" data-noescape="true">
void <span class="fragment highlight-current-border">LIR_OpVisitState::visit</span>(LIR_Op* op) {
  set_op(op);

  switch (<span class="fragment highlight-current-border">op-&gt;code()</span>) {
    ...
    case <span class="fragment highlight-current-border">lir_next_int</span>:
    {
      if (op->_info != NULL)           do_info(op->_info);
      if (<span class="fragment highlight-current-border">op-&gt;_result-&gt;is_valid()</span>)     <span class="fragment highlight-current-border">do_output(op-&gt;_result)</span>;
      break;
    }
              </code>
            </pre>

          </section>

          <section>
<table class="calling_hirarchy" style="font-size: 50%;">
  <tr>
    <td colspan="19" class="functionCall  indent_level_0">
      <span class="fragment highlight-current-border"><code style="white-space: pre-wrap;">CompileBroker::invoke_compiler_on_method()                                                                 </code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="20">&nbsp;</td>
    <td colspan="18" class="functionCall  indent_level_1">
    <span class="fragment highlight-current-border"><code>Compiler::compile_method(method=0x7fff9c127410)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="19">&nbsp;</td>
    <td colspan="17" class="functionCall  indent_level_2">
    <span class="fragment highlight-current-border"><code>Compilation::Compilation(compiler=0x7ffff0266bb0, ciMethod=0x7fff9c127410)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="18">&nbsp;</td>
    <td colspan="16" class="functionCall  indent_level_3">
    <span class="fragment highlight-current-border"><code>Compilation::compile_method()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="17">&nbsp;</td>
    <td colspan="15" class="functionCall  indent_level_4">
    <span class="fragment highlight-current-border"><code>Compilation::compile_java_method()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="16">&nbsp;</td>
    <td colspan="14" class="functionCall  indent_level_5">
    <span class="fragment highlight-current-border"><code>Compilation::build_hir()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="15">&nbsp;</td>
    <td colspan="13" class="functionCall  indent_level_6">
    <span class="fragment highlight-current-border"><code>IR::IR(method=0x7fff9c127410)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="14">&nbsp;</td>
    <td colspan="12" class="functionCall  indent_level_7">
    <span class="fragment highlight-current-border"><code>IRScope::IRScope(ciMethod=0x7fff9c127410)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="13">&nbsp;</td>
    <td colspan="11" class="functionCall  indent_level_8">
    <span class="fragment highlight-current-border"><code>IRScope::build_graph()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="12">&nbsp;</td>
    <td colspan="10" class="functionCall  indent_level_9">
    <span class="fragment highlight-current-border"><code>GraphBuilder::GraphBuilder()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="11">&nbsp;</td>
    <td colspan="9" class="functionCall  indent_level_10">
    <span class="fragment highlight-current-border"><code>GraphBuilder::iterate_all_blocks</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="10">&nbsp;</td>
    <td colspan="8" class="functionCall  indent_level_11">
    <span class="fragment highlight-current-border"><code>GraphBuilder::connect_to_end()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="9">&nbsp;</td>
    <td colspan="7" class="functionCall  indent_level_12">
    <span class="fragment highlight-current-border"><code>GraphBuilder::iterate_bytecodes_for_block()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="8">&nbsp;</td>
    <td colspan="6" class="functionCall  indent_level_13">
    <span class="fragment highlight-current-border"><code>GraphBuilder::invoke(Bytecodes::_invokespecial)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="7">&nbsp;</td>
    <td colspan="5" class="functionCall  indent_level_14">
    <span class="fragment highlight-current-border"><code>GraphBuilder::try_inline(ciMethod=0x7fff9c128e40, Bytecodes::_invokespecial)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="6">&nbsp;</td>
    <td colspan="4" class="functionCall  indent_level_15">
    <span class="fragment highlight-current-border"><code>GraphBuilder::try_inline_intrinsics(ciMethod=0x7fff9c128e40)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="5">&nbsp;</td>
    <td colspan="3" class="functionCall  indent_level_16">
    <span class="fragment highlight-current-border"><code>AbstractCompiler::is_intrinsic_available(methodHandle=0x7fffc63c4b80)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="2">&nbsp;</td>
    <td colspan="2" class="functionCall  indent_level_17">
      <span class="fragment highlight-current-border"><code>Compiler::is_intrinsic_supported(methodHandle=0x7fffc63c4b80)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="1">&nbsp;</td>
    <td colspan="1" class="functionCall  indent_level_18">
      <span class="fragment highlight-current-border"><code>VM_Version::supports_rdrand()</code></span>
    </td>
  </tr>
  <tr>
    <td colspan="3" class="functionCall  indent_level_16">
      <span class="fragment highlight-current-border"><code>GraphBuilder::build_graph_for_intrinsic(ciMethod=0x7fff9c128e40)</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="1">&nbsp;</td>
    <td colspan="2" class="functionCall  indent_level_17">
    <span class="fragment highlight-current-border"><code>new Intrinsic(id=vmIntrinsics::_nextInt)</code></span>
    </td>
  </tr>
</table>
          </section>

          <section>
<table class="calling_hirarchy" style="font-size: 50%;">
  <tr>
    <td colspan="14" class="functionCall  indent_level_0">
      <code style="white-space: pre-wrap;">CompileBroker::invoke_compiler_on_method()                                                                 </code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="15">&nbsp;</td>
    <td colspan="13" class="functionCall  indent_level_1">
    <code>Compiler::compile_method(method=0x7fff9c127410)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="14">&nbsp;</td>
    <td colspan="12" class="functionCall  indent_level_2">
    <code>Compilation::Compilation(compiler=0x7ffff0266bb0, ciMethod=0x7fff9c127410)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="13">&nbsp;</td>
    <td colspan="11" class="functionCall  indent_level_3">
    <code>Compilation::compile_method()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="12">&nbsp;</td>
    <td colspan="10" class="functionCall  indent_level_4">
    <code>Compilation::compile_java_method()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="11">&nbsp;</td>
    <td colspan="9" class="functionCall  indent_level_5">
    <mark><code>Compilation::build_hir()</code></mark>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="1">&nbsp;</td>
    <td colspan="8" class="functionCall  indent_level_6">
      <code>...</code>
    </td>
  </tr>
  <tr>
    <td colspan="9" class="functionCall  indent_level_5">
      <span class="fragment highlight-current-border"><code>Compilation::emit_lir()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="8">&nbsp;</td>
    <td colspan="8" class="functionCall  indent_level_6">
    <span class="fragment highlight-current-border"><code>IR::iterate_linear_scan_order()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="7">&nbsp;</td>
    <td colspan="7" class="functionCall  indent_level_7">
    <span class="fragment highlight-current-border"><code>BlockList::iterate_forward()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="6">&nbsp;</td>
    <td colspan="6" class="functionCall  indent_level_8">
    <span class="fragment highlight-current-border"><code>LIRGenerator::block_do()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="5">&nbsp;</td>
    <td colspan="5" class="functionCall  indent_level_9">
    <span class="fragment highlight-current-border"><code>LIRGenerator::do_root()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="4">&nbsp;</td>
    <td colspan="4" class="functionCall  indent_level_10">
    <span class="fragment highlight-current-border"><code>Intrinsic::visit()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="3">&nbsp;</td>
    <td colspan="3" class="functionCall  indent_level_11">
    <span class="fragment highlight-current-border"><code>LIRGenerator::do_Intrinsic()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="2">&nbsp;</td>
    <td colspan="2" class="functionCall  indent_level_12">
    <span class="fragment highlight-current-border"><code>LIR_List::next_int()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="1">&nbsp;</td>
    <td colspan="1" class="functionCall  indent_level_13">
    <span class="fragment highlight-current-border"><code>new LIR_Op0(LIR_Code lir_next_int)</code></span>
    </td>
  </tr>
</table>
          </section>

          <section>
<table class="calling_hirarchy" style="font-size: 50%;">
  <tr>
    <td colspan="13" class="functionCall  indent_level_0">
      <code style="white-space: pre-wrap;">CompileBroker::invoke_compiler_on_method()                                                                 </code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="16">&nbsp;</td>
    <td colspan="12" class="functionCall  indent_level_1">
    <code>Compiler::compile_method(method=0x7fff9c127410)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="15">&nbsp;</td>
    <td colspan="11" class="functionCall  indent_level_2">
    <code>Compilation::Compilation(compiler=0x7ffff0266bb0, ciMethod=0x7fff9c127410)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="14">&nbsp;</td>
    <td colspan="10" class="functionCall  indent_level_3">
    <code>Compilation::compile_method()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="13">&nbsp;</td>
    <td colspan="9" class="functionCall  indent_level_4">
    <code>Compilation::compile_java_method()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="12">&nbsp;</td>
    <td colspan="8" class="functionCall  indent_level_5">
    <code>Compilation::build_hir()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="1">&nbsp;</td>
    <td colspan="7" class="functionCall  indent_level_6">
      <code>...</code>
    </td>
  </tr>
  <tr>
    <td colspan="8" class="functionCall  indent_level_5">
      <mark><code>Compilation::emit_lir()</code></mark>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="1">&nbsp;</td>
    <td colspan="7" class="functionCall  indent_level_6">
      <code>...</code>
    </td>
  </tr>
  <tr>
    <td colspan="8" class="functionCall  indent_level_5">
      <span class="fragment highlight-current-border"><code>Compilation::emit_code_body()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="7">&nbsp;</td>
    <td colspan="7" class="functionCall  indent_level_6">
    <span class="fragment highlight-current-border"><code>LIR_Assembler::emit_code()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="6">&nbsp;</td>
    <td colspan="6" class="functionCall  indent_level_7">
    <span class="fragment highlight-current-border"><code>LIR_Assembler::emit_block()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="5">&nbsp;</td>
    <td colspan="5" class="functionCall  indent_level_8">
    <span class="fragment highlight-current-border"><code>LIR_Assembler::emit_lir_list()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="4">&nbsp;</td>
    <td colspan="4" class="functionCall  indent_level_9">
    <span class="fragment highlight-current-border"><code>LIR_Op0::emit_code()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="3">&nbsp;</td>
    <td colspan="3" class="functionCall  indent_level_10">
    <span class="fragment highlight-current-border"><code>LIR_Assembler::emit_op0()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="2">&nbsp;</td>
    <td colspan="2" class="functionCall  indent_level_11">
    <span class="fragment highlight-current-border"><code>LIR_Assembler::next_int()</code></span>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="1">&nbsp;</td>
    <td colspan="1" class="functionCall  indent_level_12">
    <span class="fragment highlight-current-border"><code>Assembler::rdrandl()</code></span>
    </td>
  </tr>
</table>
          </section>

          <section class="center">
            <h1>C1 &amp; C2 Intrinsics Demo</h1>
          </section>

        </section>


        <section style="height: 100%;">

          <section class="center">

            <h2>Project Panama: Machine Code Snippets</h2>

            <h3><b style="color: red;">DISCLAIMER:</b> only an <b><em>implementation detail</em></b> of an <b><em>experimental feature</em></b> <b style="color: red;">!!!</b></h3>

          </section>

          <section style="height: 100%;">
            <pre class="big noshadow" data-trim="true">
              <code class="java" data-trim="true" data-noescape="true">
import java.lang.invoke.<span class="fragment highlight-current-border">MethodHandle</span>;
import <span class="fragment highlight-current-border">jdk.vm.ci.panama.MachineCodeSnippet</span>;
...
public class RandomSnippet {

  static final <span class="fragment highlight-current-border">MethodHandle rdrand</span> = <span class="fragment highlight-current-border">MachineCodeSnippet.builder("rdrand")</span>
    .<span class="fragment highlight-current-border">returns(int.class, rax)</span>
    .<span class="fragment highlight-current-border">kills(rax)</span>
    .<span class="fragment highlight-current-border">code(0x0F, 0xC7, 0xF0)</span>   // rdrand eax
    .make();

  private static int <span class="fragment highlight-current-border">rdrand()</span> {
    try {
      return (int)<span class="fragment highlight-current-border">rdrand.invokeExact()</span>;
    } catch (Throwable e) { throw new Error(e); }
  }

  static int foo() {
    return <span class="fragment highlight-current-border">rdrand()</span>;
  }
              </code>
            </pre>
          </section>

          <section class="center">
            <h1>Machine Code Snippets Demo</h1>
          </section>

        </section>

        <section class="center">

          <h3 style="text-transform: none;"><a href="https://github.com/simonis/GeekOut2018">https://github.com/simonis/GeekOut2018</a></h3>

          <h3 style="text-transform: none;"><a href="https://simonis.github.io/GeekOut2018">https://simonis.github.io/GeekOut2018</a></h3>

        </section>

        <section style="height: 100%;">

          <section class="center">
            <h2 style="text-transform: none;"><code>System.arraycopy() - Bug</code></h2>
<!--
            <p style="text-align:center">..if any of the following is true, an IndexOutOfBoundsException is thrown..</p>

            <ul style="display:inline-block">
              <li>The <code>srcPos</code> argument is negative.</li>
              <li>The <code>destPos</code> argument is negative.</li>
              <li style="font-weight: bold;">The <code>length</code> argument is negative.</li>
              <li><code>srcPos+length</code> is greater than <code>src.length</code>.</li>
              <li><code>destPos+length</code> is greater than <code>dest.length</code>.</li>
            </ul>
-->
            <img width="100%" class="plain" data-src="images/System_arracopy_IOOBE.png" alt="System.arraycopy() API Definition"/>

            <p>see <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#arraycopy-java.lang.Object-int-java.lang.Object-int-int-">
                http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#arraycopy</a></p>

          </section>

          <section>
            <h2 style="text-transform: none;"><code>System.arraycopy() - Bug</code></h2>

            <pre class="big noshadow" data-trim="true">
              <code class="java" text-trim="true">
<![CDATA[
public class ArrayCopy {

  public static boolean arraycopy(Object[] src, int length) {
    try {
      System.arraycopy(src, 1, new Object[8], 1, length);
      return false;
    } catch (IndexOutOfBoundsException e) {
      return true;
    }
  }

  public static void main(String args[]){
    int count = Integer.parseInt(args[0]);

    for (int x = 0; x < count; x++) {
      if (arraycopy(new Object[8], -1) == false)
        throw new RuntimeException("Expected IndexOutOfBoundsException...");
]]>
              </code>
            </pre>
          </section>

          <section style="padding: 0; height: 100%;">
            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="terminal" data-trim="true" data-noescape="true">
$ java io.simonis.ArrayCopy 1000

<span class="fragment">$ java io.simonis.ArrayCopy 100000</span>
<span class="fragment">Exception in thread "main" java.lang.RuntimeException: \
  Expected IndexOutOfBoundsException for System.arracopy(.., -1)
	at io.simonis.ArrayCopy.main(ArrayCopy.java:19)</span>

<span class="fragment">$ java -XX:+PrintEscapeAnalysis -XX:+PrintEliminateAllocations \
                                                   io.simonis.ArrayCopy 100000</span>
<span class="fragment">======== Connection graph for  io.simonis.ArrayCopy::arraycopy
JavaObject NoEscape(NoEscape) <mark>40 AllocateArray</mark> = ArrayCopy::arraycopy @ bci:4
++++ <mark>Eliminated: 40 AllocateArray</mark>
Exception in thread "main" java.lang.RuntimeException: \
  Expected IndexOutOfBoundsException for System.arracopy(.., -1)
	at io.simonis.ArrayCopy.main(ArrayCopy.java:19)</span>

<span class="fragment">$ java -XX:+PrintEscapeAnalysis -XX:+PrintEliminateAllocations \
       -XX:-EliminateAllocations                   io.simonis.ArrayCopy 100000</span>
<span class="fragment">======== Connection graph for  io.simonis.ArrayCopy::arraycopy
JavaObject NoEscape(NoEscape) <mark>40 AllocateArray</mark> = ArrayCopy::arraycopy @ bci:4</span>
              </code>
            </pre>
          </section>

          <section style="padding: 0; height: 100%;">
<table class="calling_hirarchy" style="font-size: 70%;">
  <tr>
    <td colspan="10" class="functionCall  indent_level_3">
      <code style="white-space: pre-wrap;">Compile::Compile(compiler=0x7ffff01a0a60, target=0x7fffc4299130)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="16">&nbsp;</td>
    <td colspan="9" class="functionCall  indent_level_4">
    <code>ParseGenerator::generate()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="8">&nbsp;</td>
    <td colspan="8" class="functionCall  indent_level_5">
      <code>Parse::Parse(caller=0x7fffc440de00, parse_method=0x7fffc4299130)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="7">&nbsp;</td>
    <td colspan="7" class="functionCall  indent_level_6">
      <code>Parse::do_all_blocks()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="6">&nbsp;</td>
    <td colspan="6" class="functionCall  indent_level_7">
      <code>Parse::do_one_block()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="5">&nbsp;</td>
    <td colspan="5" class="functionCall  indent_level_8">
      <code>Parse::do_one_bytecode()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="4">&nbsp;</td>
    <td colspan="4" class="functionCall  indent_level_9">
      <code>Parse::do_call()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="3">&nbsp;</td>
    <td colspan="3" class="functionCall  indent_level_10">
      <code>LibraryIntrinsic::generate()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="2">&nbsp;</td>
    <td colspan="2" class="functionCall  indent_level_11">
      <code>LibraryCallKit::try_to_inline(id=vmIntrinsics::_arraycopy)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="1">&nbsp;</td>
    <td colspan="1" class="functionCall  indent_level_12">
      <mark><code>LibraryCallKit::inline_arraycopy()</code></mark>
    </td>
  </tr>
  <tr>
    <td colspan="9" class="functionCall  indent_level_4">
      <code>Compile::optimze()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="6">&nbsp;</td>
    <td colspan="8" class="functionCall  indent_level_5">
    <code>PhaseMacroExpand::eliminate_macro_nodes()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="2">&nbsp;</td>
    <td colspan="7" class="functionCall  indent_level_6">
      <code>PhaseMacroExpand::eliminate_allocate_node(AllocateNode*, ...)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="1">&nbsp;</td>
    <td colspan="6" class="functionCall  indent_level_7">
      <mark><code>PhaseMacroExpand::process_users_of_allocation()</code></mark>
    </td>
  </tr>
  <tr>
    <td colspan="8" class="functionCall  indent_level_5">
      <code>PhaseMacroExpand::expand_macro_nodes()</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="2">&nbsp;</td>
    <td colspan="7" class="functionCall  indent_level_6">
    <code>PhaseMacroExpand::expand_arraycopy_node(ArrayCopyNode*)</code>
    </td>
  </tr>
  <tr>
    <td class="fixed" rowspan="1">&nbsp;</td>
    <td colspan="6" class="functionCall  indent_level_7">
    <mark><code>PhaseMacroExpand::generate_arraycopy(ArrayCopyNode*, AllocateNode*, ...)</code></mark>
    </td>
  </tr>
</table>
          </section>

<!--

// ==============================inline_arraycopy=======================
// public static native void java.lang.System.arraycopy(Object src,  int  srcPos,
//                                                      Object dest, int destPos,
//                                                      int length);
bool LibraryCallKit::inline_arraycopy() {
  ...
  // The following tests must be performed
  // (1) src and dest are arrays.
  // (2) src and dest arrays must have elements of the same BasicType
  // (3) src and dest must not be null.
  // (4) src_offset must not be negative.
  // (5) dest_offset must not be negative.
  // (6) length must not be negative.
  // (7) src_offset + length must not exceed length of src.
  // (8) dest_offset + length must not exceed length of dest.
  // (9) each element of an oop array must be assignable
  ...
    // (5) dest_offset must not be negative.
    generate_negative_guard(dest_offset, slow_region);

    // (7) src_offset + length must not exceed length of src.
    generate_limit_guard(src_offset, length, load_array_length(src), slow_region);
  ...
  ArrayCopyNode* ac = ArrayCopyNode::make(...)


// Process users of eliminated allocation.
void PhaseMacroExpand::process_users_of_allocation(CallNode *alloc) {
  ...
  if (use->is_ArrayCopy()) {
    // Disconnect ArrayCopy node


Node* PhaseMacroExpand::generate_arraycopy(ArrayCopyNode *ac, AllocateArrayNode* alloc,
  ...
    // (6) length must not be negative.
    generate_negative_guard(&local_ctrl, copy_length, slow_region);


-->

          <section style="padding: 0; height: 100%;">

            <p style="text-align:left; margin: 0;"><code>share/opto/library_call.cpp</code></p>

            <pre class="big noshadow" style="height:100%; margin: 0;" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
// System.arraycopy(Object src,int srcPos,Object dest,int destPos,int length);
bool LibraryCallKit::inline_arraycopy() {
  ...
  // The following tests must be performed
  // (1) src and dest are arrays.
  // (2) src and dest arrays must have elements of the same BasicType
  // (3) src and dest must not be null.
  // (4) src_offset must not be negative.
  // (5) dest_offset must not be negative.
  // (6) length must not be negative.
  // (7) src_offset + length must not exceed length of src.
  ...
    // (5) dest_offset must not be negative.
    generate_negative_guard(dest_offset, slow_region);

    // (7) src_offset + length must not exceed length of src.
    generate_limit_guard(src_offset, length, load_array_length(src), slow_reg);
  ...
  ArrayCopyNode* ac = ArrayCopyNode::make(...)

]]>
              </code>
            </pre>
          </section>


          <section style="padding: 0; height: 100%;">

            <p style="text-align:left; margin: 0;"><code>share/opto/macro.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
// Process users of eliminated allocation.
void PhaseMacroExpand::process_users_of_allocation(CallNode *alloc) {           
  ...
  if (use->is_ArrayCopy()) {
    // Disconnect ArrayCopy node
    ArrayCopyNode* ac = use->as_ArrayCopy();
    ...
    // Disconnect src right away: it can help find new opportunities ...
    Node* src = ac->in(ArrayCopyNode::Src);
]]>
              </code>
            </pre>

            <p style="text-align:left"><code>share/opto/macroArrayCopy.cpp</code></p>

            <pre class="big noshadow" data-trim="true">
              <code class="cpp" text-trim="true">
<![CDATA[
// This routine is used from several intrinsics:  System.arraycopy,
// Object.clone (the array subcase), and Arrays.copyOf[Range].
Node* PhaseMacroExpand::generate_arraycopy(ArrayCopyNode *ac, AllocateArrayNode*
  ...
  // (6) length must not be negative.
  generate_negative_guard(&local_ctrl, copy_length, slow_region);

]]>
              </code>
            </pre>
          </section>

          <section>
            <h3 style="text-transform: none;"><a href="https://bugs.openjdk.java.net/browse/JDK-8159611">https://bugs.openjdk.java.net/browse/JDK-8159611</a></h3>
            <img class="plain" data-src="images/8159611_ArrayCopy.png" alt="JDK-8159611: C2: ArrayCopy elimination skips required parameter checks"/>
          </section>

        </section>

      </div>

    </div>

    <script src="reveal.js/lib/js/head.min.js"></script>
    <script src="reveal.js/js/reveal.js"></script>

    <script>

      // Full list of configuration options available at:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        //width: 1024,
        //height: 768,
        //width: 1280,
        //height: 720,
        width: 1366,
        height: 768,
        //width: 1920,
        //height: 1080,
        margin: 0.1,
        controls: true,
        progress: true,
        history: true,
        center: false,
        slideNumber: true,

        transition: 'none', // none/fade/slide/convex/concave/zoom

        // Optional reveal.js plugins
        dependencies: [
          { src: 'reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'reveal.js/plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() {

hljs.registerLanguage('terminal', function(hljs) {
  return {
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      {
        className: 'title',
        lexemes: /[$()>_a-zA-Z0-9]+/,
        keywords: "$ (gdb) hsdb>",
        begin: /^\$ |\(gdb\)|hsdb> /,
        end: /[^\\]\n/,
	contains: [
          hljs.COMMENT('//', '$', { endsParent: true })
	]
      }
    ]
  }
});

hljs.initHighlightingOnLoad(); } },
          { src: 'reveal.js/plugin/zoom-js/zoom.js', async: true },
          { src: 'reveal.js/plugin/notes/notes.js', async: true }
        ]
      });

      //Reveal.configure({ slideNumber: true });
    </script>

  </body>
</html>

<!--  LocalWords:  HotSpot scrollable px pre noshadow Volker Simonis builtin VM
 -->
<!--  LocalWords:  Observability Bytecode runtime bytecodes Ljava sayHello ns
 -->
<!--  LocalWords:  GeekOut JVMTI JNI fPIC JDK traceMethodAgent cpp TTS Safepoint
 -->
<!--  LocalWords:  unboxing JIT JVM safepoints Intrinsify
 -->
